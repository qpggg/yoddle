import fetch from 'node-fetch';

// üîß –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø VERCEL PREVIEW
const VERCEL_URL = 'https://yoddle-is9s9hl0a-mikhails-projects-da517846.vercel.app';
const TEST_USER = {
  login: 'admin@gmail.com', // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω
  password: 'admin' // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
};

async function testVercelGamification() {
  console.log('üöÄ –¢–ï–°–¢ –ì–ï–ô–ú–ò–§–ò–ö–ê–¶–ò–ò –ù–ê VERCEL');
  console.log('================================');
  console.log(`üì° URL: ${VERCEL_URL}`);
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞
    console.log('\nüì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞...');
    const siteResponse = await fetch(VERCEL_URL);
    
    if (!siteResponse.ok) {
      console.log(`‚ùå –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${siteResponse.status}`);
      return;
    }
    
    console.log('‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!');
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ª–æ–≥–∏–Ω–∞
    console.log('\nüîê –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ª–æ–≥–∏–Ω–∞...');
    const loginResponse = await fetch(`${VERCEL_URL}/api/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(TEST_USER)
    });
    
    if (!loginResponse.ok) {
      const errorText = await loginResponse.text();
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${loginResponse.status} - ${errorText}`);
      return;
    }
    
    const loginData = await loginResponse.json();
    console.log(`‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${loginData.user.name} (ID: ${loginData.user.id})`);
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é
    console.log('\nüéÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é...');
    const gamificationResponse = await fetch(`${VERCEL_URL}/api/gamification/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ user_id: loginData.user.id })
    });
    
    if (!gamificationResponse.ok) {
      const errorText = await gamificationResponse.text();
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${gamificationResponse.status} - ${errorText}`);
      return;
    }
    
    const gamificationData = await gamificationResponse.json();
    console.log(`‚úÖ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è: ${gamificationData.totalXP} XP`);
    console.log(`üìä –î–µ–π—Å—Ç–≤–∏–π: ${gamificationData.actions}, –ë–æ–Ω—É—Å–æ–≤: ${gamificationData.bonuses}`);
    console.log(`üî• Streak: ${gamificationData.newStreak}`);
    console.log(`üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${gamificationData.achievements.join(', ')}`);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å...');
    const activityResponse = await fetch(`${VERCEL_URL}/api/activity?user_id=${loginData.user.id}`);
    
    if (activityResponse.ok) {
      const activityData = await activityResponse.json();
      console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∞: ${activityData.dailyActivity.length} –¥–Ω–µ–π`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    }
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ Vercel —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

testVercelGamification(); 