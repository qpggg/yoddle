-- üí∞ –°–ò–°–¢–ï–ú–ê YODDLE-–ö–û–ò–ù–û–í –î–õ–Ø –ë–£–•–ì–ê–õ–¢–ï–†–°–ö–û–ì–û –£–ß–ï–¢–ê (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)
-- =================================================================

-- 1. –¢–ê–ë–õ–ò–¶–ê –ë–ê–õ–ê–ù–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
CREATE TABLE IF NOT EXISTS user_balance (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES enter(id) ON DELETE CASCADE,
    balance DECIMAL(10,2) DEFAULT 0.00,
    total_earned DECIMAL(10,2) DEFAULT 0.00,
    total_spent DECIMAL(10,2) DEFAULT 0.00,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id)
);

-- 2. –¢–ê–ë–õ–ò–¶–ê –¢–†–ê–ù–ó–ê–ö–¶–ò–ô –ö–û–ò–ù–û–í
CREATE TABLE IF NOT EXISTS coin_transactions (
    id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES enter(id) ON DELETE CASCADE,
    transaction_type VARCHAR(20) NOT NULL CHECK (transaction_type IN ('credit', 'debit', 'admin_add', 'admin_remove', 'benefit_purchase', 'monthly_allowance')),
    amount DECIMAL(10,2) NOT NULL,
    balance_before DECIMAL(10,2) NOT NULL,
    balance_after DECIMAL(10,2) NOT NULL,
    description TEXT,
    reference_id INTEGER, -- –î–ª—è —Å–≤—è–∑–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º/–ª—å–≥–æ—Ç–æ–π
    processed_by INTEGER REFERENCES enter(id), -- –ö—Ç–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª (–¥–ª—è –∞–¥–º–∏–Ω –æ–ø–µ—Ä–∞—Ü–∏–π)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 3. –¢–ê–ë–õ–ò–¶–ê –¢–ê–†–ò–§–ù–´–• –ü–õ–ê–ù–û–í –ö–û–ú–ü–ê–ù–ò–ô
CREATE TABLE IF NOT EXISTS company_plans (
    id SERIAL PRIMARY KEY,
    company_name VARCHAR(255) NOT NULL,
    employee_count INTEGER NOT NULL,
    monthly_rate DECIMAL(10,2) NOT NULL, -- 150-450—Ä –≤ –º–µ—Å—è—Ü
    coins_per_employee DECIMAL(10,2) NOT NULL, -- –ö–æ–∏–Ω—ã –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    plan_start_date DATE NOT NULL,
    plan_end_date DATE,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 4. –°–í–Ø–ó–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° –ö–û–ú–ü–ê–ù–ò–Ø–ú–ò
ALTER TABLE enter ADD COLUMN IF NOT EXISTS company_id INTEGER REFERENCES company_plans(id);
ALTER TABLE enter ADD COLUMN IF NOT EXISTS is_admin BOOLEAN DEFAULT false;

-- 5. –ò–ù–î–ï–ö–°–´ –î–õ–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò
CREATE INDEX IF NOT EXISTS idx_user_balance_user_id ON user_balance(user_id);
CREATE INDEX IF NOT EXISTS idx_coin_transactions_user_id ON coin_transactions(user_id);
CREATE INDEX IF NOT EXISTS idx_coin_transactions_type ON coin_transactions(transaction_type);
CREATE INDEX IF NOT EXISTS idx_coin_transactions_created_at ON coin_transactions(created_at);
CREATE INDEX IF NOT EXISTS idx_company_plans_active ON company_plans(is_active);

-- 6. –¢–†–ò–ì–ì–ï–†–´ –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê
CREATE OR REPLACE FUNCTION update_user_balance()
RETURNS TRIGGER AS $$
BEGIN
    -- –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –±–∞–ª–∞–Ω—Å–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    INSERT INTO user_balance (user_id, balance, total_earned, total_spent)
    VALUES (NEW.user_id, 0, 0, 0)
    ON CONFLICT (user_id) DO NOTHING;
    
    -- –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    IF NEW.transaction_type IN ('credit', 'admin_add', 'monthly_allowance') THEN
        UPDATE user_balance 
        SET 
            balance = balance + NEW.amount,
            total_earned = total_earned + NEW.amount,
            updated_at = CURRENT_TIMESTAMP
        WHERE user_id = NEW.user_id;
    ELSE
        UPDATE user_balance 
        SET 
            balance = balance - NEW.amount,
            total_spent = total_spent + NEW.amount,
            updated_at = CURRENT_TIMESTAMP
        WHERE user_id = NEW.user_id;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_user_balance
    AFTER INSERT ON coin_transactions
    FOR EACH ROW
    EXECUTE FUNCTION update_user_balance();

-- 7. –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–û–ò–ù–ê–ú–ò

-- –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–∏–Ω–æ–≤
CREATE OR REPLACE FUNCTION add_coins(
    p_user_id INTEGER,
    p_amount DECIMAL(10,2),
    p_description TEXT DEFAULT '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
    p_type VARCHAR(20) DEFAULT 'credit',
    p_processed_by INTEGER DEFAULT NULL
) RETURNS BOOLEAN AS $$
DECLARE
    current_balance DECIMAL(10,2);
BEGIN
    -- –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    SELECT COALESCE(balance, 0) INTO current_balance 
    FROM user_balance 
    WHERE user_id = p_user_id;
    
    -- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ –±–∞–ª–∞–Ω—Å–∞, —Å–æ–∑–¥–∞–µ–º
    IF current_balance IS NULL THEN
        INSERT INTO user_balance (user_id, balance, total_earned, total_spent)
        VALUES (p_user_id, 0, 0, 0);
        current_balance := 0;
    END IF;
    
    -- –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    INSERT INTO coin_transactions (
        user_id, transaction_type, amount, balance_before, balance_after, 
        description, processed_by
    ) VALUES (
        p_user_id, p_type, p_amount, current_balance, current_balance + p_amount,
        p_description, p_processed_by
    );
    
    RETURN true;
EXCEPTION
    WHEN OTHERS THEN
        RETURN false;
END;
$$ LANGUAGE plpgsql;

-- –§—É–Ω–∫—Ü–∏—è —Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–∏–Ω–æ–≤
CREATE OR REPLACE FUNCTION spend_coins(
    p_user_id INTEGER,
    p_amount DECIMAL(10,2),
    p_description TEXT DEFAULT '–ü–æ–∫—É–ø–∫–∞ –ª—å–≥–æ—Ç—ã',
    p_reference_id INTEGER DEFAULT NULL
) RETURNS BOOLEAN AS $$
DECLARE
    current_balance DECIMAL(10,2);
BEGIN
    -- –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    SELECT COALESCE(balance, 0) INTO current_balance 
    FROM user_balance 
    WHERE user_id = p_user_id;
    
    -- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ –±–∞–ª–∞–Ω—Å–∞
    IF current_balance IS NULL THEN
        current_balance := 0;
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
    IF current_balance < p_amount THEN
        RAISE EXCEPTION '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ';
    END IF;
    
    -- –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    INSERT INTO coin_transactions (
        user_id, transaction_type, amount, balance_before, balance_after,
        description, reference_id
    ) VALUES (
        p_user_id, 'debit', p_amount, current_balance, current_balance - p_amount,
        p_description, p_reference_id
    );
    
    RETURN true;
EXCEPTION
    WHEN OTHERS THEN
        RETURN false;
END;
$$ LANGUAGE plpgsql;

-- 8. –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ï–ñ–ï–ú–ï–°–Ø–ß–ù–û–ì–û –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø –ö–û–ò–ù–û–í
CREATE OR REPLACE FUNCTION monthly_coins_allocation()
RETURNS INTEGER AS $$
DECLARE
    company_rec RECORD;
    user_rec RECORD;
    coins_per_user DECIMAL(10,2);
    total_allocated INTEGER := 0;
BEGIN
    -- –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∫–æ–º–ø–∞–Ω–∏—è–º
    FOR company_rec IN 
        SELECT * FROM company_plans WHERE is_active = true
    LOOP
        coins_per_user := company_rec.coins_per_employee;
        
        -- –ù–∞—á–∏—Å–ª—è–µ–º –∫–æ–∏–Ω—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫–æ–º–ø–∞–Ω–∏–∏
        FOR user_rec IN 
            SELECT id FROM enter WHERE company_id = company_rec.id
        LOOP
            PERFORM add_coins(
                user_rec.id,
                coins_per_user,
                '–ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–∏–Ω–æ–≤ –æ—Ç ' || company_rec.company_name,
                'monthly_allowance'
            );
            total_allocated := total_allocated + 1;
        END LOOP;
    END LOOP;
    
    RETURN total_allocated;
END;
$$ LANGUAGE plpgsql;

-- 9. –ü–†–ï–î–°–¢–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –ë–£–•–ì–ê–õ–¢–ï–†–°–ö–ò–• –û–¢–ß–ï–¢–û–í

-- –ë–∞–ª–∞–Ω—Å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
CREATE VIEW balance_report AS
SELECT 
    u.id,
    u.name,
    u.login as email,
    cp.company_name,
    ub.balance,
    ub.total_earned,
    ub.total_spent,
    ub.updated_at as last_balance_update
FROM enter u
LEFT JOIN user_balance ub ON u.id = ub.user_id
LEFT JOIN company_plans cp ON u.company_id = cp.id
ORDER BY u.name;

-- –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
CREATE VIEW transactions_report AS
SELECT 
    ct.id,
    u.name as user_name,
    u.login as email,
    cp.company_name,
    ct.transaction_type,
    ct.amount,
    ct.description,
    ct.created_at,
    admin_user.name as processed_by_name
FROM coin_transactions ct
JOIN enter u ON ct.user_id = u.id
LEFT JOIN company_plans cp ON u.company_id = cp.id
LEFT JOIN enter admin_user ON ct.processed_by = admin_user.id
ORDER BY ct.created_at DESC;

-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º
CREATE VIEW company_statistics AS
SELECT 
    cp.id,
    cp.company_name,
    cp.employee_count,
    cp.monthly_rate,
    cp.coins_per_employee,
    COUNT(u.id) as actual_employees,
    SUM(ub.balance) as total_balance,
    SUM(ub.total_earned) as total_coins_issued,
    SUM(ub.total_spent) as total_coins_spent
FROM company_plans cp
LEFT JOIN enter u ON u.company_id = cp.id
LEFT JOIN user_balance ub ON u.id = ub.user_id
WHERE cp.is_active = true
GROUP BY cp.id, cp.company_name, cp.employee_count, cp.monthly_rate, cp.coins_per_employee;

-- 10. –û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ ENTER
ALTER TABLE enter ADD COLUMN IF NOT EXISTS balance DECIMAL(10,2) DEFAULT 0.00;

-- –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –º–µ–∂–¥—É enter –∏ user_balance
CREATE OR REPLACE FUNCTION sync_balance_with_enter()
RETURNS TRIGGER AS $$
BEGIN
    -- –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ user_balance, –æ–±–Ω–æ–≤–ª—è–µ–º enter
    IF TG_OP = 'UPDATE' OR TG_OP = 'INSERT' THEN
        UPDATE enter 
        SET balance = NEW.balance 
        WHERE id = NEW.user_id;
        RETURN NEW;
    END IF;
    
    -- –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ user_balance, –æ–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ enter
    IF TG_OP = 'DELETE' THEN
        UPDATE enter 
        SET balance = 0.00 
        WHERE id = OLD.user_id;
        RETURN OLD;
    END IF;
    
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
DROP TRIGGER IF EXISTS trigger_sync_balance_enter ON user_balance;
CREATE TRIGGER trigger_sync_balance_enter
    AFTER INSERT OR UPDATE OR DELETE ON user_balance
    FOR EACH ROW
    EXECUTE FUNCTION sync_balance_with_enter();

-- 11. –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø
-- –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ user_balance –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ enter
INSERT INTO user_balance (user_id, balance, total_earned, total_spent)
SELECT 
    id, 
    COALESCE(balance, 0.00), 
    COALESCE(balance, 0.00), 
    0.00
FROM enter 
ON CONFLICT (user_id) DO NOTHING;

-- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –≤ enter –∏–∑ user_balance
UPDATE enter 
SET balance = COALESCE(ub.balance, 0.00)
FROM user_balance ub 
WHERE enter.id = ub.user_id;

-- 12. –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ò –ö –¢–ê–ë–õ–ò–¶–ê–ú
COMMENT ON TABLE user_balance IS '–ë–∞–ª–∞–Ω—Å Yoddle-–∫–æ–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π';
COMMENT ON TABLE coin_transactions IS '–ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–æ–∏–Ω–∞–º–∏';
COMMENT ON TABLE company_plans IS '–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã –∫–æ–º–ø–∞–Ω–∏–π';

COMMENT ON COLUMN coin_transactions.transaction_type IS '–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: credit/debit/admin_add/admin_remove/benefit_purchase/monthly_allowance';
COMMENT ON COLUMN company_plans.monthly_rate IS '–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–ª–∞—Ç–∞ 150-450—Ä';
COMMENT ON COLUMN company_plans.coins_per_employee IS '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –º–µ—Å—è—Ü';
COMMENT ON COLUMN enter.balance IS '–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å Yoddle-–∫–æ–∏–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';

-- –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏
SELECT '–°–∏—Å—Ç–µ–º–∞ Yoddle-–∫–æ–∏–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!' as status;