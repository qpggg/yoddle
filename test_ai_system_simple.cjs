// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–∏—Å—Ç–µ–º—ã Yoddle (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
// –ó–∞–ø—É—Å–∫: node test_ai_system_simple.cjs

const http = require('http');

const BASE_URL = 'localhost:3001'; // –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–æ—Ä—Ç
const TEST_USER_ID = 1; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID 1

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
const testMoodData = {
    userId: 1,
    mood: 8,
    activities: ["—Ä–∞–±–æ—Ç–∞", "—Å–ø–æ—Ä—Ç"],
    notes: "–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å! –ó–∞–≤–µ—Ä—à–∏–ª –ø—Ä–æ–µ–∫—Ç",
    stressLevel: 2
};

const testActivityData = {
    userId: 1,
    activity: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–∏—Å—Ç–µ–º—ã",
    category: "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
    duration: 120,
    success: true,
    notes: "AI API —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!"
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –Ω—É–∂–µ–Ω)
function getAuthToken() {
    return ''; // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞
}

// –ü—Ä–æ—Å—Ç–æ–π HTTP –∑–∞–ø—Ä–æ—Å
function makeRequest(path, method = 'GET', data = null) {
    return new Promise((resolve, reject) => {
        const postData = data ? JSON.stringify(data) : null;
        
        const options = {
            hostname: 'localhost',
            port: 3001,
            path: path,
            method: method,
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': postData ? Buffer.byteLength(postData) : 0
            }
        };

        const req = http.request(options, (res) => {
            let body = '';
            res.on('data', (chunk) => {
                body += chunk;
            });
            res.on('end', () => {
                try {
                    const jsonData = JSON.parse(body);
                    resolve({ status: res.statusCode, data: jsonData });
                } catch (e) {
                    resolve({ status: res.statusCode, data: body });
                }
            });
        });

        req.on('error', (err) => {
            reject(err);
        });

        if (postData) {
            req.write(postData);
        }
        req.end();
    });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerHealth() {
    console.log('üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞...');
    try {
        const response = await makeRequest('/health');
        if (response.status === 200) {
            console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
            return true;
        } else {
            console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
async function testMoodAnalysis() {
    console.log('üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è...');
    try {
        const response = await makeRequest('/api/ai/analyze-mood', 'POST', testMoodData);
        if (response.status === 200) {
            console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω:');
            console.log('üìä –ê–Ω–∞–ª–∏–∑:', response.data.analysis);
            console.log('üÜî ID —Å–∏–≥–Ω–∞–ª–∞:', response.data.signalId);
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:', response.data.error);
        }
        return response.status === 200;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async function testActivityLogging() {
    console.log('üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
    try {
        const response = await makeRequest('/api/ai/log-activity', 'POST', testActivityData);
        if (response.status === 200) {
            console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞:');
            console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:', response.data.recommendation);
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', response.data.error);
        }
        return response.status === 200;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤
async function testGetInsights() {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤...');
    try {
        const response = await makeRequest(`/api/ai/insights/${TEST_USER_ID}`);
        if (response.status === 200) {
            console.log('‚úÖ –ò–Ω—Å–∞–π—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:');
            console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å–∞–π—Ç–æ–≤:', response.data.insights.length);
            if (response.data.insights.length > 0) {
                console.log('üí° –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω—Å–∞–π—Ç:', response.data.insights[0].content.substring(0, 100) + '...');
            }
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤:', response.data.error);
        }
        return response.status === 200;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
async function testGetRecommendations() {
    console.log('üí° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...');
    try {
        const response = await makeRequest('/api/ai/recommendations?userId=1');
        if (response.status === 200) {
            console.log('‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:');
            console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', response.data.recommendations.length);
            if (response.data.recommendations.length > 0) {
                console.log('üí° –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:', response.data.recommendations[0].message.substring(0, 80) + '...');
            }
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', response.data.error);
        }
        return response.status === 200;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞
async function testWeeklyInsight() {
    console.log('üìÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞...');
    try {
        const response = await makeRequest('/api/ai/generate-daily-insight', 'POST', { userId: 1 });
        if (response.status === 200) {
            console.log('‚úÖ –ù–µ–¥–µ–ª—å–Ω—ã–π –∏–Ω—Å–∞–π—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:');
            console.log('üí° –ò–Ω—Å–∞–π—Ç:', response.data.insight.substring(0, 100) + '...');
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–∞:', response.data.error);
        }
        return response.status === 200;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        return false;
    }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ AI —Å–∏—Å—Ç–µ–º—ã...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
    const serverHealthy = await checkServerHealth();
    if (!serverHealthy) {
        console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã');
        return;
    }
    
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:\n');
    
    const results = {
        moodAnalysis: await testMoodAnalysis(),
        activityLogging: await testActivityLogging(),
        getInsights: await testGetInsights(),
        getRecommendations: await testGetRecommendations(),
        weeklyInsight: await testWeeklyInsight()
    };
    
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:');
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã:', Object.values(results).filter(Boolean).length);
    console.log('‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:', Object.values(results).filter(r => !r).length);
    
    if (Object.values(results).every(Boolean)) {
        console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    } else {
        console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAllTests().catch(console.error);
