import fetch from 'node-fetch';

async function testAllIssues() {
  console.log('üîç –¢–ï–°–¢ –í–°–ï–• –ü–†–û–ë–õ–ï–ú');
  console.log('====================');
  
  const testUser = {
    login: 'andrei@gmail.com',
    password: 'andrei'
  };
  
  try {
    // –¢–µ—Å—Ç 1: –í—Ö–æ–¥ –ê–Ω–¥—Ä–µ—è
    console.log('\nüìù –¢–µ—Å—Ç 1: –í—Ö–æ–¥ –ê–Ω–¥—Ä–µ—è...');
    const loginResponse = await fetch('http://localhost:3000/api/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testUser)
    });
    
    if (!loginResponse.ok) {
      const errorText = await loginResponse.text();
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${loginResponse.status} - ${errorText}`);
      return;
    }
    
    const loginData = await loginResponse.json();
    console.log(`‚úÖ –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω! ID: ${loginData.user.id}`);
    
    const userId = loginData.user.id;
    
    // –¢–µ—Å—Ç 2: –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Ö–æ–¥–∞
    console.log('\nüéÆ –¢–µ—Å—Ç 2: –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—Ö–æ–¥–∞...');
    const gamificationResponse = await fetch('http://localhost:3000/api/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        user_id: userId,
        gamification: true
      })
    });
    
    if (gamificationResponse.ok) {
      const gamificationData = await gamificationResponse.json();
      console.log(`‚úÖ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è: ${gamificationData.totalXP} XP`);
      console.log(`üìä –î–µ–π—Å—Ç–≤–∏–π: ${gamificationData.actions}, –ë–æ–Ω—É—Å–æ–≤: ${gamificationData.bonuses}`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    }
    
    // –¢–µ—Å—Ç 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª—å–≥–æ—Ç—ã
    console.log('\nüéÅ –¢–µ—Å—Ç 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª—å–≥–æ—Ç—ã...');
    const benefitResponse = await fetch('http://localhost:3000/api/user-benefits', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        user_id: userId,
        benefit_id: 1
      })
    });
    
    if (benefitResponse.ok) {
      const benefitData = await benefitResponse.json();
      console.log(`‚úÖ –õ—å–≥–æ—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! XP: ${benefitData.xpEarned || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
    } else {
      const errorText = await benefitResponse.text();
      console.log(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª—å–≥–æ—Ç—ã: ${benefitResponse.status} - ${errorText}`);
    }
    
    // –¢–µ—Å—Ç 4: –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
    console.log('\nüìã –¢–µ—Å—Ç 4: –ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞...');
    const testResponse = await fetch('http://localhost:3000/api/user-recommendations', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        user_id: userId,
        benefit_ids: [1, 2, 3],
        answers: { q1: 'yes', q2: 'no' }
      })
    });
    
    if (testResponse.ok) {
      console.log(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω!`);
    } else {
      const errorText = await testResponse.text();
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${testResponse.status} - ${errorText}`);
    }
    
    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    console.log('\nüìä –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
    const activityResponse = await fetch(`http://localhost:3000/api/activity?user_id=${userId}`);
    
    if (activityResponse.ok) {
      const activityData = await activityResponse.json();
      console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∞: ${activityData.totalActions} –¥–µ–π—Å—Ç–≤–∏–π`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

testAllIssues(); 