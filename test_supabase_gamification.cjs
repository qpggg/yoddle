const { Pool } = require('pg');

// üîß –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö SUPABASE
const supabaseConnectionString = 'postgresql://postgres.wbgagyckqpkeemztsgka:22kiKggfEG2haS5x@aws-0-eu-north-1.pooler.supabase.com:5432/postgres';

const pool = new Pool({
  connectionString: supabaseConnectionString,
  ssl: { rejectUnauthorized: false }
});

async function testSupabaseGamification() {
  console.log('üöÄ –¢–ï–°–¢ –ì–ï–ô–ú–ò–§–ò–ö–ê–¶–ò–ò –ù–ê SUPABASE');
  console.log('==================================');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüë§ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const userResult = await client.query(
      'SELECT id, login, password FROM enter WHERE login = $1',
      ['test@gmail.com']
    );
    
    if (userResult.rows.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å test@gmail.com –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase');
      return;
    }
    
    const user = userResult.rows[0];
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user.login} (ID: ${user.id})`);
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ activity_log
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º activity_log...');
    const activityResult = await client.query(
      'SELECT COUNT(*) as count FROM activity_log WHERE user_id = $1 AND DATE(created_at) = CURRENT_DATE',
      [user.id]
    );
    
    const todayActivities = parseInt(activityResult.rows[0].count);
    console.log(`üìà –ó–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${todayActivities}`);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º user_progress
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º user_progress...');
    const progressResult = await client.query(
      'SELECT * FROM user_progress WHERE user_id = $1',
      [user.id]
    );
    
    if (progressResult.rows.length > 0) {
      const progress = progressResult.rows[0];
      console.log(`‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–π–¥–µ–Ω: XP=${progress.xp}, Streak=${progress.login_streak}`);
    } else {
      console.log('‚ùå –ó–∞–ø–∏—Å—å –≤ user_progress –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é
    console.log('\nüéÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    const existingAchievements = await client.query(
      'SELECT action FROM activity_log WHERE user_id = $1 AND action IN ($2, $3, $4) AND DATE(created_at) = CURRENT_DATE',
      [user.id, 'login', 'first_login_today', 'streak_milestone']
    );
    
    const existingActions = existingAchievements.rows.map(row => row.action);
    console.log(`üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ–≥–æ–¥–Ω—è: ${existingActions.join(', ') || '–Ω–µ—Ç'}`);
    
    // –°–æ–∑–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    const actions = [];
    
    // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É (10 XP) - –≤—Å–µ–≥–¥–∞
    actions.push({
      action: 'login',
      xp_earned: 10,
      description: '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É'
    });
    
    // –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å (15 XP) - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è
    const todayLogin = existingAchievements.rows.find(row => row.action === 'first_login_today');
    if (!todayLogin) {
      actions.push({
        action: 'first_login_today',
        xp_earned: 15,
        description: '–ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å'
      });
    }
    
    // –°–µ—Ä–∏—è –≤—Ö–æ–¥–æ–≤ (50 XP) - –ø—Ä–æ–≤–µ—Ä—è–µ–º streak
    const currentStreak = progressResult.rows[0]?.login_streak || 0;
    const newStreak = currentStreak + 1;
    
    // –î–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ streak –∫–∞–∂–¥—ã–µ 7 –¥–Ω–µ–π
    const streakMilestone = existingAchievements.rows.find(row => row.action === 'streak_milestone');
    if (newStreak % 7 === 0 && !streakMilestone) {
      actions.push({
        action: 'streak_milestone',
        xp_earned: 50,
        description: `–°–µ—Ä–∏—è –≤—Ö–æ–¥–æ–≤: ${newStreak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥`
      });
    }
    
    console.log(`üéØ –î–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${actions.length}`);
    actions.forEach(action => {
      console.log(`   - ${action.action}: ${action.xp_earned} XP`);
    });
    
    // 6. –í—ã–ø–æ–ª–Ω—è–µ–º –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é
    console.log('\nüöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é...');
    
    const promises = actions.map(action =>
      client.query(
        'INSERT INTO activity_log (user_id, action, xp_earned, description) VALUES ($1, $2, $3, $4)',
        [user.id, action.action, action.xp_earned, action.description]
      )
    );
    
    await Promise.all(promises);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π XP
    const totalXP = actions.reduce((sum, action) => sum + action.xp_earned, 0);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ user_progress
    await client.query(
      `INSERT INTO user_progress (user_id, login_streak, last_activity, xp) 
       VALUES ($1, 1, CURRENT_TIMESTAMP, $2) 
       ON CONFLICT (user_id) 
       DO UPDATE SET 
         login_streak = user_progress.login_streak + 1, 
         last_activity = CURRENT_TIMESTAMP,
         xp = user_progress.xp + $2`,
      [user.id, totalXP]
    );
    
    console.log(`‚úÖ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!`);
    console.log(`üéØ –û–±—â–∏–π XP: ${totalXP}`);
    console.log(`üìä –î–µ–π—Å—Ç–≤–∏–π: ${actions.length}`);
    console.log(`üî• –ù–æ–≤—ã–π streak: ${newStreak}`);
    
    // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
    
    const newActivityResult = await client.query(
      'SELECT COUNT(*) as count FROM activity_log WHERE user_id = $1 AND DATE(created_at) = CURRENT_DATE',
      [user.id]
    );
    
    const newTodayActivities = parseInt(newActivityResult.rows[0].count);
    console.log(`üìà –ó–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å–ª–µ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${newTodayActivities}`);
    
    const newProgressResult = await client.query(
      'SELECT * FROM user_progress WHERE user_id = $1',
      [user.id]
    );
    
    if (newProgressResult.rows.length > 0) {
      const newProgress = newProgressResult.rows[0];
      console.log(`‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å: XP=${newProgress.xp}, Streak=${newProgress.login_streak}`);
    }
    
    client.release();
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await pool.end();
  }
}

testSupabaseGamification(); 