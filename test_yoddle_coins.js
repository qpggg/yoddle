import fetch from 'node-fetch';

const BASE_URL = 'http://localhost:3000';

async function testYoddleCoins() {
  console.log('üí∞ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ YODDLE-–ö–û–ò–ù–û–í');
  console.log('======================================\n');

  const testUserId = 1; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID 1
  const adminId = 1; // –ê–¥–º–∏–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤

  try {
    // 1. –¢–ï–°–¢: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('1. üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...');
    const balanceResponse = await fetch(`${BASE_URL}/api/balance?user_id=${testUserId}&action=balance`);
    
    if (balanceResponse.ok) {
      const balanceData = await balanceResponse.json();
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω:', {
        balance: balanceData.balance,
        total_earned: balanceData.total_earned,
        total_spent: balanceData.total_spent,
        company: balanceData.company_name
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', await balanceResponse.text());
    }

    // 2. –¢–ï–°–¢: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–∏–Ω–æ–≤ (–∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    console.log('\n2. ‚ûï –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–∏–Ω–æ–≤...');
    const addCoinsResponse = await fetch(`${BASE_URL}/api/balance`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        user_id: testUserId,
        action: 'add_coins',
        amount: 100,
        description: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
        processed_by: adminId
      })
    });

    if (addCoinsResponse.ok) {
      const addData = await addCoinsResponse.json();
      console.log('‚úÖ –ö–æ–∏–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã:', {
        message: addData.message,
        new_balance: addData.new_balance
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–∏–Ω–æ–≤:', await addCoinsResponse.text());
    }

    // 3. –¢–ï–°–¢: –ü–æ–∫—É–ø–∫–∞ –ª—å–≥–æ—Ç—ã (—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–∏–Ω–æ–≤)
    console.log('\n3. üõí –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∫—É–ø–∫—É –ª—å–≥–æ—Ç—ã...');
    const spendCoinsResponse = await fetch(`${BASE_URL}/api/balance`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        user_id: testUserId,
        action: 'spend_coins',
        amount: 25,
        description: '–ü–æ–∫—É–ø–∫–∞ –ª—å–≥–æ—Ç—ã: –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å',
        reference_id: 1
      })
    });

    if (spendCoinsResponse.ok) {
      const spendData = await spendCoinsResponse.json();
      console.log('‚úÖ –ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞:', {
        message: spendData.message,
        new_balance: spendData.new_balance
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:', await spendCoinsResponse.text());
    }

    // 4. –¢–ï–°–¢: –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    console.log('\n4. üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
    const transactionsResponse = await fetch(`${BASE_URL}/api/balance?user_id=${testUserId}&action=transactions&limit=10`);
    
    if (transactionsResponse.ok) {
      const transactionsData = await transactionsResponse.json();
      console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', {
        total_transactions: transactionsData.total,
        recent_transactions: transactionsData.transactions.slice(0, 3).map(t => ({
          type: t.type,
          amount: t.amount,
          description: t.description,
          date: new Date(t.created_at).toLocaleDateString()
        }))
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', await transactionsResponse.text());
    }

    // 5. –¢–ï–°–¢: –û—Ç—á–µ—Ç –ø–æ –±–∞–ª–∞–Ω—Å–∞–º (–∞–¥–º–∏–Ω—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
    console.log('\n5. üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ –±–∞–ª–∞–Ω—Å–∞–º...');
    const reportResponse = await fetch(`${BASE_URL}/api/admin-coins?admin_id=${adminId}&action=balance_report`);
    
    if (reportResponse.ok) {
      const reportData = await reportResponse.json();
      console.log('‚úÖ –û—Ç—á–µ—Ç –ø–æ–ª—É—á–µ–Ω:', {
        total_users: reportData.report.length,
        sample_user: reportData.report[0] ? {
          name: reportData.report[0].name,
          balance: reportData.report[0].balance,
          company: reportData.report[0].company
        } : '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', await reportResponse.text());
    }

    // 6. –¢–ï–°–¢: –¢–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ —Å—Ä–µ–¥—Å—Ç–≤
    console.log('\n6. üö´ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Å—Ä–µ–¥—Å—Ç–≤...');
    const overspendResponse = await fetch(`${BASE_URL}/api/balance`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        user_id: testUserId,
        action: 'spend_coins',
        amount: 10000, // –ó–∞–≤–µ–¥–æ–º–æ –±–æ–ª—å—à–∞—è —Å—É–º–º–∞
        description: '–¢–µ—Å—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞'
      })
    });

    if (!overspendResponse.ok) {
      const errorData = await overspendResponse.json();
      if (errorData.error.includes('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤')) {
        console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      } else {
        console.log('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', errorData.error);
      }
    } else {
      console.log('‚ùå –°–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª–∏–ª–∞ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å!');
    }

    console.log('\nüí∞ –°–ò–°–¢–ï–ú–ê YODDLE-–ö–û–ò–ù–û–í –†–ê–ë–û–¢–ê–ï–¢!');
    console.log('=====================================');
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞');
    console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–∏–Ω–æ–≤ (–∞–¥–º–∏–Ω)');
    console.log('‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ –∫–æ–∏–Ω–æ–≤ (–ø–æ–∫—É–ø–∫–∏)');
    console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π');
    console.log('‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã');
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

async function testCompanyManagement() {
  console.log('\nüè¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–û–ú–ü–ê–ù–ò–Ø–ú–ò');
  console.log('======================================\n');

  const adminId = 1;

  try {
    // 1. –¢–ï–°–¢: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    console.log('1. ‚ûï –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é...');
    const addCompanyResponse = await fetch(`${BASE_URL}/api/admin-coins`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        admin_id: adminId,
        action: 'add_company',
        company_data: {
          company_name: '–û–û–û "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è"',
          employee_count: 50,
          monthly_rate: 300.00,
          coins_per_employee: 25.00,
          plan_start_date: new Date().toISOString().split('T')[0]
        }
      })
    });

    if (addCompanyResponse.ok) {
      const companyData = await addCompanyResponse.json();
      console.log('‚úÖ –ö–æ–º–ø–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞:', {
        message: companyData.message,
        company_id: companyData.company_id
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏:', await addCompanyResponse.text());
    }

    // 2. –¢–ï–°–¢: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π
    console.log('\n2. üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–ø–∞–Ω–∏–π...');
    const statsResponse = await fetch(`${BASE_URL}/api/admin-coins?admin_id=${adminId}&action=company_stats`);
    
    if (statsResponse.ok) {
      const statsData = await statsResponse.json();
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', {
        total_companies: statsData.companies.length,
        sample_company: statsData.companies[0] ? {
          name: statsData.companies[0].company_name,
          employees: `${statsData.companies[0].actual_employees}/${statsData.companies[0].planned_employees}`,
          monthly_rate: statsData.companies[0].monthly_rate,
          coins_per_employee: statsData.companies[0].coins_per_employee
        } : '–ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π'
      });
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', await statsResponse.text());
    }

    console.log('\nüè¢ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ü–ê–ù–ò–Ø–ú–ò –†–ê–ë–û–¢–ê–ï–¢!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
async function runAllTests() {
  await testYoddleCoins();
  await new Promise(resolve => setTimeout(resolve, 1000)); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
  await testCompanyManagement();
  
  console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!');
  console.log('======================');
  console.log('üí∞ –°–∏—Å—Ç–µ–º–∞ Yoddle-–∫–æ–∏–Ω–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
  console.log('üè¢ –ë–∏–∑–Ω–µ—Å-–º–æ–¥–µ–ª—å: 150-450—Ä/–º–µ—Å + –∫–æ–∏–Ω—ã –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');
  console.log('üìä –ü–æ–ª–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏');
}

runAllTests().catch(console.error);