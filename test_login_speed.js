import fetch from 'node-fetch';

const BASE_URL = 'http://localhost:3000';

const testCredentials = [
  { login: 'admin@gmail.com', password: 'admin' },
  { login: 'test@gmail.com', password: 'test' }
];

async function testLoginSpeed(credentials) {
  const startTime = Date.now();
  
  try {
    const response = await fetch(`${BASE_URL}/api/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(credentials)
    });
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    if (response.ok) {
      const data = await response.json();
      console.log(`‚úÖ –í—Ö–æ–¥ ${credentials.login}: ${duration}ms`);
      return { success: true, duration, user: data.user };
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ ${credentials.login}: ${duration}ms`);
      return { success: false, duration };
    }
  } catch (error) {
    const endTime = Date.now();
    const duration = endTime - startTime;
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ ${credentials.login}: ${duration}ms - ${error.message}`);
    return { success: false, duration, error: error.message };
  }
}

async function runSpeedTests() {
  console.log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ö–û–†–û–°–¢–ò –í–•–û–î–ê');
  console.log('================================\n');
  
  const results = [];
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥ (–±–µ–∑ –∫—ç—à–∞)
  console.log('üìù –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥ (–±–µ–∑ –∫—ç—à–∞):');
  const firstResult = await testLoginSpeed(testCredentials[0]);
  results.push(firstResult);
  
  // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ (—Å –∫—ç—à–µ–º)
  console.log('\nüìù –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—Ö–æ–¥ (—Å –∫—ç—à–µ–º):');
  const secondResult = await testLoginSpeed(testCredentials[0]);
  results.push(secondResult);
  
  // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–µ—Ç–∏–π –≤—Ö–æ–¥ (—Å –∫—ç—à–µ–º)
  console.log('\nüìù –¢—Ä–µ—Ç–∏–π –≤—Ö–æ–¥ (—Å –∫—ç—à–µ–º):');
  const thirdResult = await testLoginSpeed(testCredentials[0]);
  results.push(thirdResult);
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–û–†–û–°–¢–ò:');
  console.log('========================');
  
  const successfulLogins = results.filter(r => r.success);
  const failedLogins = results.filter(r => !r.success);
  
  if (successfulLogins.length > 0) {
    const avgDuration = successfulLogins.reduce((sum, r) => sum + r.duration, 0) / successfulLogins.length;
    const minDuration = Math.min(...successfulLogins.map(r => r.duration));
    const maxDuration = Math.max(...successfulLogins.map(r => r.duration));
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤: ${successfulLogins.length}`);
    console.log(`‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgDuration.toFixed(0)}ms`);
    console.log(`‚ö° –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${minDuration}ms`);
    console.log(`üêå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${maxDuration}ms`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (successfulLogins.length >= 3) {
      const firstLogin = successfulLogins[0].duration;
      const cachedLogins = successfulLogins.slice(1);
      const avgCachedDuration = cachedLogins.reduce((sum, r) => sum + r.duration, 0) / cachedLogins.length;
      
      console.log(`\nüéØ –ê–ù–ê–õ–ò–ó –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø:`);
      console.log(`üìù –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥: ${firstLogin}ms`);
      console.log(`‚ö° –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥—ã: ${avgCachedDuration.toFixed(0)}ms`);
      
      if (avgCachedDuration < firstLogin * 0.8) {
        console.log('‚úÖ –ö–≠–® –†–ê–ë–û–¢–ê–ï–¢! –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—Ö–æ–¥—ã –±—ã—Å—Ç—Ä–µ–µ');
      } else {
        console.log('‚ö†Ô∏è  –ö–≠–® –ù–ï –†–ê–ë–û–¢–ê–ï–¢! –ù–µ—Ç —É—Å–∫–æ—Ä–µ–Ω–∏—è');
      }
    }
    
    if (avgDuration < 500) {
      console.log('üéØ –û–¢–õ–ò–ß–ù–û! –í—Ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ');
    } else if (avgDuration < 1000) {
      console.log('üëç –•–û–†–û–®–û! –í—Ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
    } else {
      console.log('‚ö†Ô∏è  –ú–ï–î–õ–ï–ù–ù–û! –ù—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è');
    }
  }
  
  if (failedLogins.length > 0) {
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤: ${failedLogins.length}`);
    failedLogins.forEach(r => {
      console.log(`   - ${r.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    });
  }
  
  console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  if (successfulLogins.length > 0) {
    const avgDuration = successfulLogins.reduce((sum, r) => sum + r.duration, 0) / successfulLogins.length;
    if (avgDuration > 1000) {
      console.log('- –í—Ö–æ–¥ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ');
      console.log('- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ API –∑–∞–ø—Ä–æ—Å—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } else {
      console.log('- –°–∫–æ—Ä–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –≤ –Ω–æ—Ä–º–µ');
      console.log('- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }
  }
}

runSpeedTests().catch(console.error); 