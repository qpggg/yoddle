import fetch from 'node-fetch';

// üîß –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –û–°–ù–û–í–ù–û–ì–û –°–ï–†–í–ï–†–ê –í –†–û–°–°–ò–ò
// –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –†–ï–ê–õ–¨–ù–´–ô URL!
const MAIN_SERVER_URL = 'http://185.185.69.254:3000'; // –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ—Ä—Ç 3000
const TEST_USER = {
  login: 'test@gmail.com',
  password: 'test'
};

async function testMainServer() {
  console.log('üöÄ –¢–ï–°–¢ –û–°–ù–û–í–ù–û–ì–û –°–ï–†–í–ï–†–ê –í –†–û–°–°–ò–ò');
  console.log('=====================================');
  console.log(`üì° URL: ${MAIN_SERVER_URL}`);
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞
    console.log('\nüì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞...');
    const siteResponse = await fetch(MAIN_SERVER_URL);
    
    if (!siteResponse.ok) {
      console.log(`‚ùå –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${siteResponse.status}`);
      return;
    }
    
    console.log('‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!');
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ª–æ–≥–∏–Ω–∞
    console.log('\nüîê –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ª–æ–≥–∏–Ω–∞...');
    const loginResponse = await fetch(`${MAIN_SERVER_URL}/api/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(TEST_USER)
    });
    
    if (!loginResponse.ok) {
      const errorText = await loginResponse.text();
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${loginResponse.status} - ${errorText}`);
      return;
    }
    
    const loginData = await loginResponse.json();
    console.log(`‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: ${loginData.user.name}`);
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é
    console.log('\nüéÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é...');
    const gamificationResponse = await fetch(`${MAIN_SERVER_URL}/api/gamification/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ user_id: loginData.user.id })
    });
    
    if (!gamificationResponse.ok) {
      const errorText = await gamificationResponse.text();
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${gamificationResponse.status} - ${errorText}`);
      return;
    }
    
    const gamificationData = await gamificationResponse.json();
    console.log(`‚úÖ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è: ${gamificationData.totalXP} XP`);
    console.log(`üìä –î–µ–π—Å—Ç–≤–∏–π: ${gamificationData.actions}, –ë–æ–Ω—É—Å–æ–≤: ${gamificationData.bonuses}`);
    
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢: –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.log('\nüí° –ü–û–î–°–ö–ê–ó–ö–ê:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL –≤ —Å—Ç—Ä–æ–∫–µ 5');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑ —Å–µ—Ç–∏');
  }
}

testMainServer(); 