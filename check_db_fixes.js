import { Client } from 'pg';
import dotenv from 'dotenv';

dotenv.config();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ë–î
function createDbClient() {
  const connectionString = process.env.PG_CONNECTION_STRING || 'postgresql://postgres.wbgagyckqpkeemztsgka:22kiKggfEG2haS5x@aws-0-eu-north-1.pooler.supabase.com:5432/postgres';
  
  return new Client({
    connectionString: connectionString,
    ssl: { rejectUnauthorized: false }
  });
}

async function checkDbFixes() {
  const client = createDbClient();
  
  try {
    await client.connect();
    console.log('üîç –ü–†–û–í–ï–†–ö–ê –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –ë–î –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('üìä –ü–†–û–í–ï–†–ö–ê –ò–ù–î–ï–ö–°–û–í:');
    
    const indexQueries = [
      { name: 'activity_log_user_date', query: "SELECT indexname FROM pg_indexes WHERE indexname = 'idx_activity_log_user_date'" },
      { name: 'user_achievements_user_id', query: "SELECT indexname FROM pg_indexes WHERE indexname = 'idx_user_achievements_user_id'" },
      { name: 'notifications_user_read', query: "SELECT indexname FROM pg_indexes WHERE indexname = 'idx_notifications_user_read'" },
      { name: 'enter_login', query: "SELECT indexname FROM pg_indexes WHERE indexname = 'idx_enter_login'" }
    ];
    
    for (const index of indexQueries) {
      try {
        const result = await client.query(index.query);
        if (result.rows.length > 0) {
          console.log(`‚úÖ ${index.name}: –°–û–ó–î–ê–ù`);
        } else {
          console.log(`‚ùå ${index.name}: –ù–ï –°–û–ó–î–ê–ù`);
        }
      } catch (error) {
        console.log(`‚ùå ${index.name}: –û–®–ò–ë–ö–ê - ${error.message}`);
      }
    }
    
    console.log('\nüîß –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–ô:');
    
    const functionQueries = [
      { name: 'get_user_activity', query: "SELECT proname FROM pg_proc WHERE proname = 'get_user_activity'" },
      { name: 'get_user_achievements', query: "SELECT proname FROM pg_proc WHERE proname = 'get_user_achievements'" },
      { name: 'get_unread_notifications', query: "SELECT proname FROM pg_proc WHERE proname = 'get_unread_notifications'" }
    ];
    
    for (const func of functionQueries) {
      try {
        const result = await client.query(func.query);
        if (result.rows.length > 0) {
          console.log(`‚úÖ ${func.name}: –°–û–ó–î–ê–ù–ê`);
        } else {
          console.log(`‚ùå ${func.name}: –ù–ï –°–û–ó–î–ê–ù–ê`);
        }
      } catch (error) {
        console.log(`‚ùå ${func.name}: –û–®–ò–ë–ö–ê - ${error.message}`);
      }
    }
    
    console.log('\nüìà –ü–†–û–í–ï–†–ö–ê –ü–†–ï–î–°–¢–ê–í–õ–ï–ù–ò–ô:');
    
    const viewQueries = [
      { name: 'activity_stats', query: "SELECT viewname FROM pg_views WHERE viewname = 'activity_stats'" },
      { name: 'achievement_stats', query: "SELECT viewname FROM pg_views WHERE viewname = 'achievement_stats'" },
      { name: 'benefit_stats', query: "SELECT viewname FROM pg_views WHERE viewname = 'benefit_stats'" }
    ];
    
    for (const view of viewQueries) {
      try {
        const result = await client.query(view.query);
        if (result.rows.length > 0) {
          console.log(`‚úÖ ${view.name}: –°–û–ó–î–ê–ù–û`);
        } else {
          console.log(`‚ùå ${view.name}: –ù–ï –°–û–ó–î–ê–ù–û`);
        }
      } catch (error) {
        console.log(`‚ùå ${view.name}: –û–®–ò–ë–ö–ê - ${error.message}`);
      }
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    console.log('\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–ô:');
    
    try {
      const activityResult = await client.query('SELECT * FROM get_user_activity(1, 2024, 12) LIMIT 1');
      console.log(`‚úÖ get_user_activity: –†–ê–ë–û–¢–ê–ï–¢ (${activityResult.rows.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)`);
    } catch (error) {
      console.log(`‚ùå get_user_activity: –û–®–ò–ë–ö–ê - ${error.message}`);
    }
    
    try {
      const achievementsResult = await client.query('SELECT * FROM get_user_achievements(1) LIMIT 1');
      console.log(`‚úÖ get_user_achievements: –†–ê–ë–û–¢–ê–ï–¢ (${achievementsResult.rows.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)`);
    } catch (error) {
      console.log(`‚ùå get_user_achievements: –û–®–ò–ë–ö–ê - ${error.message}`);
    }
    
    console.log('\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('- –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã: –≤—ã–ø–æ–ª–Ω–∏—Ç–µ CREATE INDEX –∫–æ–º–∞–Ω–¥—ã');
    console.log('- –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã: –≤—ã–ø–æ–ª–Ω–∏—Ç–µ CREATE FUNCTION –∫–æ–º–∞–Ω–¥—ã');
    console.log('- –ï—Å–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω—ã: –≤—ã–ø–æ–ª–Ω–∏—Ç–µ CREATE VIEW –∫–æ–º–∞–Ω–¥—ã');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î:', error);
  } finally {
    await client.end();
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
checkDbFixes().catch(console.error); 