import express from 'express';
import { Pool } from 'pg';
import Anthropic from '@anthropic-ai/sdk';

const router = express.Router();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Claude API
const anthropic = new Anthropic({
  apiKey: process.env.CLAUDE_API_KEY,
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ API –∑–∞–ø—Ä–æ—Å–æ–≤
async function retryApiCall(apiCall, maxRetries = 3, delay = 1000) {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await apiCall();
    } catch (error) {
      console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error.message);
      
      if (attempt === maxRetries) {
        throw error;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–π
      if (error.code === 'EAI_AGAIN' || error.message.includes('getaddrinfo EAI_AGAIN')) {
        console.log(`–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –æ–∂–∏–¥–∞–Ω–∏–µ ${delay}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
        await new Promise(resolve => setTimeout(resolve, delay));
        delay *= 2; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ
      } else {
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
        throw error;
      }
    }
  }
}

// Database connection
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

// POST /api/ai/analyze-mood - –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/analyze-mood', async (req, res) => {
  try {
    const { mood, activities, notes, stressLevel } = req.body;
    const userId = req.body.userId || 1; // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID = 1

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –ë–î
    const signalQuery = `
      INSERT INTO ai_signals (user_id, type, data, timestamp)
      VALUES ($1, $2, $3, $4)
      RETURNING id
    `;
    
    const signalData = {
      mood,
      activities,
      notes,
      stressLevel,
      timestamp: new Date()
    };

    const signalResult = await pool.query(signalQuery, [
      userId,
      'mood',
      JSON.stringify(signalData),
      new Date()
    ]);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é Claude
    const prompt = `
      You are a compassionate and understanding AI friend-psychologist. Your task is to provide a thoughtful and empathetic response to a user based on their daily input. Here's how you should approach this:

      1. First, carefully read the following information about the user:

      <mood>${mood}/10</mood>
      <activities>${activities.join(', ')}</activities>
      <notes>${notes}</notes>
      <stress_level>${stressLevel}/10</stress_level>

      2. Your response should follow this structure:

      <emotional_reaction>
      Respond emotionally to the user's situation in 1-2 sentences. Use appropriate emojis:
      üéâ for celebrations and good news
      üòä for positive, ordinary days
      üí™ for encouragement during challenges
      Ensure your reaction matches the tone of the user's day.
      </emotional_reaction>

      <situation_analysis>
      Provide a brief, friendly analysis of the user's situation and mood, as a good friend would.
      </situation_analysis>

      <advice>
      Offer three specific pieces of advice:
      1. A suggestion for today
      2. Something to help with mood or stress
      3. A plan for tomorrow
      </advice>

      <forecast>
      Give an optimistic prediction with words of support.
      </forecast>

      3. Important guidelines to follow:
      - Prioritize reacting to events. Congratulate and celebrate good news, show understanding for challenges, and be friendly for ordinary days.
      - Write in a friendly, lively tone, like a close friend would.
      - Be empathetic and supportive throughout your response.
      - Limit your response to 80-100 words.
      - Do not use any numbers in your text.
      - Focus on emotions rather than formality.
      - Write in Russian.

      Remember, your goal is to make the user feel heard, understood, and supported. Tailor your response to their specific situation and emotional state.
    `;

    const message = await retryApiCall(async () => {
      return await anthropic.messages.create({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 400,
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ]
      });
    });

    const analysis = message.content[0].text;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å–∞–π—Ç
    const insightQuery = `
      INSERT INTO ai_insights (user_id, type, content, created_at)
      VALUES ($1, $2, $3, $4)
      RETURNING id
    `;

    await pool.query(insightQuery, [
      userId,
      'mood_analysis',
      analysis,
      new Date()
    ]);

    res.json({
      success: true,
      analysis,
      signalId: signalResult.rows[0].id
    });

  } catch (error) {
    console.error('AI mood analysis error:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è'
    });
  }
});

// GET /api/ai/insights/:userId - –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤
router.get('/insights/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±—Ä–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    const insightsQuery = `
      SELECT * FROM ai_insights 
      WHERE user_id = $1 
      ORDER BY created_at DESC 
      LIMIT 10
    `;

    const insightsResult = await pool.query(insightsQuery, [userId]);

    res.json({
      success: true,
      insights: insightsResult.rows
    });

  } catch (error) {
    console.error('Get insights error:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤'
    });
  }
});

// POST /api/ai/log-activity - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
router.post('/log-activity', async (req, res) => {
  try {
    const { activity, category, duration, success, notes } = req.body;
    const userId = req.body.userId || 1; // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID = 1

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const activityQuery = `
      INSERT INTO ai_signals (user_id, type, data, timestamp)
      VALUES ($1, $2, $3, $4)
      RETURNING id
    `;

    const activityData = {
      activity,
      category,
      duration,
      success,
      notes,
      timestamp: new Date()
    };

    await pool.query(activityQuery, [
      userId,
      'activity',
      JSON.stringify(activityData),
      new Date()
    ]);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    const prompt = `
      You are a friendly AI coach working to increase user engagement and loyalty in HR-tech tasks. Your goal is to provide a thoughtful, empathetic response to the user's reported activity, understanding their situation and offering appropriate advice.

      Here is the information about the user's activity:

      <activity_info>
      üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activity}
      üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}
      ‚è±Ô∏è –í—Ä–µ–º—è: ${duration} –º–∏–Ω—É—Ç
      ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${success ? '–£—Å–ø–µ—Ö!' : '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å'}
      üìù –ó–∞–º–µ—Ç–∫–∏: ${notes}
      </activity_info>

      Your response should follow this format:

      1. Start with an emotional reaction:
         If ${success ? '–£—Å–ø–µ—Ö!' : '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å'} is "–£—Å–ø–µ—Ö!", begin with "üéâ –û–¢–õ–ò–ß–ù–û!"
         If ${success ? '–£—Å–ø–µ—Ö!' : '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å'} is "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å", begin with "üí™ –ù–ï –†–ê–°–°–¢–†–ê–ò–í–ê–ô–°–Ø!"

      2. Follow with a one-sentence response:
         If ${success ? '–£—Å–ø–µ—Ö!' : '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å'} is "–£—Å–ø–µ—Ö!", congratulate the user on their success.
         If ${success ? '–£—Å–ø–µ—Ö!' : '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å'} is "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å", offer support and frame the failure as a learning experience.

      3. Provide a specific piece of advice based on the result, starting with "üöÄ –ß–¢–û –î–ê–õ–¨–®–ï"

      Your response should adhere to the following style guidelines:
      - Friendly and emotional
      - React strongly to the success or failure
      - Maximum of 30-50 words
      - No numbers in the text
      - Express vivid emotions
      - Use a friendly, supportive, and emotional tone
      - Write in Russian

      Remember to tailor your advice and emotional response to the specific activity, category, duration, and any notes provided. Your goal is to make the user feel understood and motivated to continue their efforts.

      Provide your response within <response> tags.
    `;

    const message = await retryApiCall(async () => {
      return await anthropic.messages.create({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 150,
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ]
      });
    });

    const recommendation = message.content[0].text;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    const recQuery = `
      INSERT INTO ai_recommendations (user_id, category, message, priority, created_at)
      VALUES ($1, $2, $3, $4, $5)
    `;

    await pool.query(recQuery, [
      userId,
      category,
      recommendation,
      success ? 'low' : 'high',
      new Date()
    ]);

    res.json({
      success: true,
      recommendation
    });

  } catch (error) {
    console.error('Log activity error:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
    });
  }
});

// GET /api/ai/recommendations - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
router.get('/recommendations', async (req, res) => {
  try {
    const userId = req.query.userId || 1; // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID = 1

    const recQuery = `
      SELECT * FROM ai_recommendations 
      WHERE user_id = $1 
      ORDER BY priority DESC, created_at DESC 
      LIMIT 5
    `;

    const recResult = await pool.query(recQuery, [userId]);

    res.json({
      success: true,
      recommendations: recResult.rows
    });

  } catch (error) {
    console.error('Get recommendations error:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π'
    });
  }
});

// POST /api/ai/generate-personal-recommendations - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
router.post('/generate-personal-recommendations', async (req, res) => {
  try {
    const { userId } = req.body;
    const targetUserId = userId || 1;

    console.log(`üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}`);

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userDataQuery = `
      SELECT 
        s.type,
        s.data,
        s.timestamp,
        i.content as insight_content
      FROM ai_signals s
      LEFT JOIN ai_insights i ON s.user_id = i.user_id
      WHERE s.user_id = $1
      ORDER BY s.timestamp DESC
      LIMIT 50
    `;

    const userDataResult = await pool.query(userDataQuery, [targetUserId]);
    
    if (userDataResult.rows.length === 0) {
      return res.json({
        success: true,
        recommendations: ['–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫!']
      });
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const moodData = userDataResult.rows
      .filter(row => row.type === 'mood')
      .map(row => {
        try {
          const data = JSON.parse(row.data);
          return { mood: data.mood, stress: data.stressLevel, timestamp: row.timestamp };
        } catch (e) {
          return null;
        }
      })
      .filter(Boolean);

    const activityData = userDataResult.rows
      .filter(row => row.type === 'activity')
      .map(row => {
        try {
          const data = JSON.parse(row.data);
          return { activity: data.activity, success: data.success, duration: data.duration };
        } catch (e) {
          return null;
        }
      })
      .filter(Boolean);

    const prompt = `
      –¢—ã - AI-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ª–∏—á–Ω–æ–º—É —Ä–∞–∑–≤–∏—Ç–∏—é. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–π 5 –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.
      
      –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
      üìä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (${moodData.length} –∑–∞–ø–∏—Å–µ–π): ${moodData.map(d => d.mood).join(', ')}
      üìà –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: ${moodData.map(d => d.stress).join(', ')}
      üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (${activityData.length} –∑–∞–ø–∏—Å–µ–π): ${activityData.map(d => d.activity).join(', ')}
      ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${activityData.filter(d => d.success).length}/${activityData.length}
      
      –ó–ê–î–ê–ß–ê:
      –°–æ–∑–¥–∞–π 5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
      
      üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø 1: [–ù–∞–∑–≤–∞–Ω–∏–µ]
      [–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç]
      
      üéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø 2: [–ù–∞–∑–≤–∞–Ω–∏–µ]
      [–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç]
      
      [–ò —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π]
      
      –°–¢–ò–õ–¨: 
      - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –≤—ã–ø–æ–ª–Ω–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
      - –£—á–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      - –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π, –Ω–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ç–æ–Ω
      - –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
      
      –¢–æ–Ω: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π. –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
      –î–õ–ò–ù–ê: 300-400 —Å–ª–æ–≤.
    `;

    console.log('ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...');
    const message = await retryApiCall(async () => {
      return await anthropic.messages.create({
        model: 'claude-3-haiku-20240307',
        max_tokens: 600,
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ]
      });
    });

    const recommendations = message.content[0].text;
    console.log('‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const recQuery = `
      INSERT INTO ai_recommendations (user_id, category, message, priority, created_at)
      VALUES ($1, $2, $3, $4, $5)
    `;

    await pool.query(recQuery, [
      targetUserId,
      'personal_ai',
      recommendations,
      'high',
      new Date()
    ]);

    res.json({
      success: true,
      recommendations: recommendations
    });

  } catch (error) {
    console.error('‚ùå Generate personal recommendations error:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π'
    });
  }
});

// POST /api/ai/generate-daily-insight - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞
router.post('/generate-daily-insight', async (req, res) => {
  try {
    const userId = req.body.userId || 1; // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID = 1
    const forceRegenerate = req.body.forceRegenerate || false; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    console.log(`üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–Ω—Å–∞–π—Ç –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
    const weekStart = new Date();
    weekStart.setDate(weekStart.getDate() - weekStart.getDay()); // –ù–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    weekStart.setHours(0, 0, 0, 0);

    if (!forceRegenerate) {
      const existingInsightQuery = `
        SELECT * FROM ai_insights 
        WHERE user_id = $1 
        AND type = 'weekly_insight'
        AND created_at >= $2
        ORDER BY created_at DESC
        LIMIT 1
      `;
      
      const existingInsight = await pool.query(existingInsightQuery, [userId, weekStart]);
      
      if (existingInsight.rows.length > 0) {
        console.log('‚ÑπÔ∏è –ù–µ–¥–µ–ª—å–Ω—ã–π –∏–Ω—Å–∞–π—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é');
        return res.json({
          success: true,
          insight: existingInsight.rows[0].content,
          isNew: false,
          weekStart: weekStart.toISOString()
        });
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    const dataQuery = `
      SELECT * FROM ai_signals 
      WHERE user_id = $1 
      AND timestamp >= NOW() - INTERVAL '7 days'
      ORDER BY timestamp DESC
    `;

    const dataResult = await pool.query(dataQuery, [userId]);
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: ${dataResult.rows.length}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    if (dataResult.rows.length < 3) {
      console.log('‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –∑–∞–ø–∏—Å–∏)');
      return res.json({
        success: true,
        insight: '–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!',
        isNew: false,
        weekStart: weekStart.toISOString()
      });
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const moodData = dataResult.rows
      .filter(row => row.type === 'mood')
      .map(row => {
        try {
          return JSON.parse(row.data);
        } catch (e) {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ mood –¥–∞–Ω–Ω—ã—Ö: ${e.message}`);
          return null;
        }
      })
      .filter(Boolean);

    const activityData = dataResult.rows
      .filter(row => row.type === 'activity')
      .map(row => {
        try {
          return JSON.parse(row.data);
        } catch (e) {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ activity –¥–∞–Ω–Ω—ã—Ö: ${e.message}`);
          return null;
        }
      })
      .filter(Boolean);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞)
    let gamificationData = [];
    try {
      const gamificationQuery = `
        SELECT * FROM user_progress 
        WHERE user_id = $1 
        AND updated_at >= NOW() - INTERVAL '7 days'
        ORDER BY updated_at DESC
      `;
      const gamificationResult = await pool.query(gamificationQuery, [userId]);
      gamificationData = gamificationResult.rows;
      console.log(`üéÆ –î–∞–Ω–Ω—ã–µ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${gamificationData.length} –∑–∞–ø–∏—Å–µ–π`);
    } catch (e) {
      console.log('‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
    }

    console.log(`üìà –î–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: ${moodData.length} –∑–∞–ø–∏—Å–µ–π`);
    console.log(`üìù –î–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${activityData.length} –∑–∞–ø–∏—Å–µ–π`);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
    let context = '';
    
    if (moodData.length > 0) {
      const avgMood = (moodData.reduce((sum, d) => sum + (d.mood || 0), 0) / moodData.length).toFixed(1);
      context += `üìä –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é: ${avgMood}/10\n`;
    }
    
    if (activityData.length > 0) {
      const categories = [...new Set(activityData.map(d => d.category))];
      context += `üìù –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${categories.join(', ')}\n`;
    }
    
    if (gamificationData.length > 0) {
      const totalPoints = gamificationData.reduce((sum, d) => sum + (d.points || 0), 0);
      context += `üéÆ –û—á–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é: +${totalPoints}\n`;
    }

    const prompt = `
      –¢—ã - –¥–æ–±—Ä—ã–π AI-–¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ–¥–µ–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–µ—Ç —Ç–µ–ø–ª—ã–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Å–æ–≤–µ—Ç—ã.

      –í–æ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é:

      <context>
      ${context}
      </context>

      –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –∫–∞–∫ –ª—É—á—à–∏–π –¥—Ä—É–≥ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ.

      –¢–í–û–ô –û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨:
      - –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
      - 50-80 —Å–ª–æ–≤
      - –û–¥–∏–Ω –∞–±–∑–∞—Ü
      - –¢–µ–ø–ª—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω
      - –ë–µ–∑ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏ —Ü–∏—Ñ—Ä

      –í–ö–õ–Æ–ß–ò –í –û–¢–í–ï–¢:
      - –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Ç—ã –∑–∞–º–µ—Ç–∏–ª –≤ –Ω–µ–¥–µ–ª–µ
      - –ß—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö–æ—Ä–æ—à–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è
      - –û–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ–≤–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é

      –ü–∏—à–∏ –∫–∞–∫ –±—É–¥—Ç–æ –ø–∏—à–µ—à—å –¥—Ä—É–≥—É –≤ —á–∞—Ç - —Ç–µ–ø–ª–æ, –∏—Å–∫—Ä–µ–Ω–Ω–µ, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.

      –ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å <answer> –∏ –∑–∞–∫–æ–Ω—á–∏ </answer>.
    `;

    console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude AI...');
    const message = await retryApiCall(async () => {
      return await anthropic.messages.create({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 200,
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ]
      });
    });

    const insight = message.content[0].text;
    console.log('‚úÖ AI –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞:', insight.length);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å–∞–π—Ç
    const insightQuery = `
      INSERT INTO ai_insights (user_id, type, content, created_at, metadata)
      VALUES ($1, $2, $3, $4, $5)
    `;

    await pool.query(insightQuery, [
      userId,
      'weekly_insight',
      insight,
      new Date(),
      JSON.stringify({
        weekStart: weekStart.toISOString(),
        dataPoints: dataResult.rows.length,
        moodEntries: moodData.length,
        activityEntries: activityData.length,
        gamificationEntries: gamificationData.length
      })
    ]);
    console.log('üíæ –ù–µ–¥–µ–ª—å–Ω—ã–π –∏–Ω—Å–∞–π—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î');

    res.json({
      success: true,
      insight,
      isNew: true,
      weekStart: weekStart.toISOString(),
      metadata: {
        dataPoints: dataResult.rows.length,
        moodEntries: moodData.length,
        activityEntries: activityData.length
      }
    });

  } catch (error) {
    console.error('‚ùå Generate weekly insight error:', error);
    console.error('Stack trace:', error.stack);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞',
      details: error.message
    });
  }
});

// POST /api/ai/analyze-trends - –ê–Ω–∞–ª–∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤
router.post('/analyze-trends', async (req, res) => {
  try {
    const { userId, period = '30' } = req.body; // period –≤ –¥–Ω—è—Ö
    const targetUserId = userId || 1;

    console.log(`üìà –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞ ${period} –¥–Ω–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    const trendsDataQuery = `
      SELECT 
        s.type,
        s.data,
        s.timestamp,
        DATE(s.timestamp) as date
      FROM ai_signals s
      WHERE s.user_id = $1 
      AND s.timestamp >= NOW() - INTERVAL '${period} days'
      ORDER BY s.timestamp ASC
    `;

    const trendsResult = await pool.query(trendsDataQuery, [targetUserId]);
    
    if (trendsResult.rows.length === 0) {
      return res.json({
        success: true,
        trends: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤. –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 7 –¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.'
      });
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
    const dailyData = {};
    trendsResult.rows.forEach(row => {
      const date = row.date;
      if (!dailyData[date]) {
        dailyData[date] = { mood: [], stress: [], activities: [] };
      }
      
      try {
        const data = JSON.parse(row.data);
        if (row.type === 'mood') {
          dailyData[date].mood.push(data.mood);
          dailyData[date].stress.push(data.stressLevel);
        } else if (row.type === 'activity') {
          dailyData[date].activities.push(data.activity);
        }
      } catch (e) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: ${e.message}`);
      }
    });

    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const trends = Object.keys(dailyData).map(date => ({
      date,
      avgMood: dailyData[date].mood.length > 0 ? 
        (dailyData[date].mood.reduce((a, b) => a + b, 0) / dailyData[date].mood.length).toFixed(1) : 'N/A',
      avgStress: dailyData[date].stress.length > 0 ? 
        (dailyData[date].stress.reduce((a, b) => a + b, 0) / dailyData[date].stress.length).toFixed(1) : 'N/A',
      activityCount: dailyData[date].activities.length
    }));

    const prompt = `
      –¢—ã - AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–º —Ç—Ä–µ–Ω–¥–∞–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ ${period} –¥–Ω–µ–π –∏ –≤—ã—è–≤–∏ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã.
      
      –î–ê–ù–ù–´–ï –ü–û –î–ù–Ø–ú:
      ${trends.map(t => `üìÖ ${t.date}: –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ${t.avgMood}/10, –°—Ç—Ä–µ—Å—Å ${t.avgStress}/10, –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: ${t.activityCount}`).join('\n')}
      
      –ó–ê–î–ê–ß–ê:
      –°–æ–∑–¥–∞–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
      
      üìä –û–ë–©–ò–ï –¢–†–ï–ù–î–´
      [–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, —Å—Ç—Ä–µ—Å—Å–∞ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥]
      
      üîç –í–´–Ø–í–õ–ï–ù–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´
      - [–ü–∞—Ç—Ç–µ—Ä–Ω 1: —á—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ]
      - [–ü–∞—Ç—Ç–µ—Ä–Ω 2: —á—Ç–æ –º–µ–Ω—è–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º]
      - [–ü–∞—Ç—Ç–µ—Ä–Ω 3: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏]
      
      üìà –ü–†–û–ì–ù–û–ó –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
      [–ß—Ç–æ –æ–∂–∏–¥–∞—Ç—å –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –∏ –∫–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è]
      
      –°–¢–ò–õ–¨: 
      - –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–π
      - –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ —Ñ–∞–∫—Ç—ã
      - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã
      - –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
      
      –¢–æ–Ω: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π. –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
      –î–õ–ò–ù–ê: 250-350 —Å–ª–æ–≤.
    `;

    console.log('ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã...');
    const message = await retryApiCall(async () => {
      return await anthropic.messages.create({
        model: 'claude-3-haiku-20240307',
        max_tokens: 500,
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ]
      });
    });

    const trendsAnalysis = message.content[0].text;
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
    const trendsQuery = `
      INSERT INTO ai_insights (user_id, type, content, created_at)
      VALUES ($1, $2, $3, $4)
    `;

    await pool.query(trendsQuery, [
      targetUserId,
      'trends_analysis',
      trendsAnalysis,
      new Date()
    ]);

    res.json({
      success: true,
      trends: trendsAnalysis,
      rawData: trends
    });

  } catch (error) {
    console.error('‚ùå Analyze trends error:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤'
    });
  }
});

// POST /api/ai/force-weekly-insight - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
router.post('/force-weekly-insight', async (req, res) => {
  try {
    const { userId, weekOffset = 0 } = req.body; // weekOffset: 0 = —Ç–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è, -1 = –ø—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è
    const targetUserId = userId || 1;
    
    console.log(`üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetUserId}, –Ω–µ–¥–µ–ª—è: ${weekOffset}`);

    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è
    const weekStart = new Date();
    weekStart.setDate(weekStart.getDate() - weekStart.getDay() + (weekOffset * 7));
    weekStart.setHours(0, 0, 0, 0);

    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å–∞–π—Ç –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é
    const deleteQuery = `
      DELETE FROM ai_insights 
      WHERE user_id = $1 
      AND type = 'weekly_insight'
      AND created_at >= $2
      AND created_at < $3
    `;
    
    const weekEnd = new Date(weekStart);
    weekEnd.setDate(weekEnd.getDate() + 7);
    
    await pool.query(deleteQuery, [targetUserId, weekStart, weekEnd]);
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å–∞–π—Ç –∑–∞ –Ω–µ–¥–µ–ª—é');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∏–Ω—Å–∞–π—Ç
    const insightData = {
      userId: targetUserId,
      forceRegenerate: true
    };

    // –í—ã–∑—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–∞
    const insightResult = await generateWeeklyInsight(targetUserId, weekStart, weekEnd);
    
    if (insightResult.success) {
      res.json({
        success: true,
        message: '–ù–µ–¥–µ–ª—å–Ω—ã–π –∏–Ω—Å–∞–π—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω',
        insight: insightResult.insight,
        weekStart: weekStart.toISOString(),
        metadata: insightResult.metadata
      });
    } else {
      throw new Error(insightResult.error);
    }

  } catch (error) {
    console.error('‚ùå Force weekly insight error:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞',
      details: error.message
    });
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞
async function generateWeeklyInsight(userId, weekStart, weekEnd) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–µ–¥–µ–ª—é
    const dataQuery = `
      SELECT * FROM ai_signals 
      WHERE user_id = $1 
      AND timestamp >= $2
      AND timestamp < $3
      ORDER BY timestamp DESC
    `;

    const dataResult = await pool.query(dataQuery, [userId, weekStart, weekEnd]);
    
    if (dataResult.rows.length < 3) {
      return {
        success: false,
        error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –∑–∞–ø–∏—Å–∏)'
      };
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–∫–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞)
    const moodData = dataResult.rows
      .filter(row => row.type === 'mood')
      .map(row => {
        try {
          return JSON.parse(row.data);
        } catch (e) {
          return null;
        }
      })
      .filter(Boolean);

    const activityData = dataResult.rows
      .filter(row => row.type === 'activity')
      .map(row => {
        try {
          return JSON.parse(row.data);
        } catch (e) {
          return null;
        }
      })
      .filter(Boolean);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
    let gamificationData = [];
    try {
      const gamificationQuery = `
        SELECT * FROM user_progress 
        WHERE user_id = $1 
        AND updated_at >= $2
        AND updated_at < $3
        ORDER BY updated_at DESC
      `;
      const gamificationResult = await pool.query(gamificationQuery, [userId, weekStart, weekEnd]);
      gamificationData = gamificationResult.rows;
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
    let context = '';
    
    if (moodData.length > 0) {
      const avgMood = (moodData.reduce((sum, d) => sum + (d.mood || 0), 0) / moodData.length).toFixed(1);
      context += `üìä –°—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –Ω–µ–¥–µ–ª—é: ${avgMood}/10\n`;
    }
    
    if (activityData.length > 0) {
      const categories = [...new Set(activityData.map(d => d.category))];
      context += `üìù –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${categories.join(', ')}\n`;
    }
    
    if (gamificationData.length > 0) {
      const totalPoints = gamificationData.reduce((sum, d) => sum + (d.points || 0), 0);
      context += `üéÆ –û—á–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é: +${totalPoints}\n`;
    }

    const prompt = `
      –¢—ã - –¥–æ–±—Ä—ã–π AI-–¥—Ä—É–≥, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ–¥–µ–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞–µ—Ç —Ç–µ–ø–ª—ã–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ —Å–æ–≤–µ—Ç—ã.

      –í–æ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é:

      <context>
      ${context}
      </context>

      –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –∫–∞–∫ –ª—É—á—à–∏–π –¥—Ä—É–≥ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ.

      –¢–í–û–ô –û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨:
      - –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
      - 50-80 —Å–ª–æ–≤
      - –û–¥–∏–Ω –∞–±–∑–∞—Ü
      - –¢–µ–ø–ª—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω
      - –ë–µ–∑ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏ —Ü–∏—Ñ—Ä

      –í–ö–õ–Æ–ß–ò –í –û–¢–í–ï–¢:
      - –ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Ç—ã –∑–∞–º–µ—Ç–∏–ª –≤ –Ω–µ–¥–µ–ª–µ
      - –ß—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ö–æ—Ä–æ—à–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è
      - –û–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ–≤–µ—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é

      –ü–∏—à–∏ –∫–∞–∫ –±—É–¥—Ç–æ –ø–∏—à–µ—à—å –¥—Ä—É–≥—É –≤ —á–∞—Ç - —Ç–µ–ø–ª–æ, –∏—Å–∫—Ä–µ–Ω–Ω–µ, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.

      –ù–∞—á–Ω–∏ –æ—Ç–≤–µ—Ç —Å <answer> –∏ –∑–∞–∫–æ–Ω—á–∏ </answer>.
    `;

    const message = await retryApiCall(async () => {
      return await anthropic.messages.create({
        model: 'claude-3-5-sonnet-20241022',
        max_tokens: 200,
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ]
      });
    });

    const insight = message.content[0].text;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å–∞–π—Ç
    const insightQuery = `
      INSERT INTO ai_insights (user_id, type, content, created_at, metadata)
      VALUES ($1, $2, $3, $4, $5)
    `;

    await pool.query(insightQuery, [
      userId,
      'weekly_insight',
      insight,
      new Date(),
      JSON.stringify({
        weekStart: weekStart.toISOString(),
        dataPoints: dataResult.rows.length,
        moodEntries: moodData.length,
        activityEntries: activityData.length,
        gamificationEntries: gamificationData.length
      })
    ]);

    return {
      success: true,
      insight,
      metadata: {
        dataPoints: dataResult.rows.length,
        moodEntries: moodData.length,
        activityEntries: activityData.length
      }
    };

  } catch (error) {
    console.error('‚ùå Generate weekly insight helper error:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

export default router;
