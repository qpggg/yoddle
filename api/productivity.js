import express from 'express';
import { Pool } from 'pg';
import { createDbClient } from '../db.js';

const router = express.Router();
const db = createDbClient();

// =====================================================
// API –î–õ–Ø –ê–õ–ì–û–†–ò–¢–ú–ê –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–ò
// =====================================================

// POST /api/productivity/mood-check - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
router.post('/mood-check', async (req, res) => {
  try {
    const { userId, mood, energy, stress, notes } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã (–º–∞–∫—Å–∏–º—É–º 3 –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –≤ –¥–µ–Ω—å)
    const dailyLimitCheck = await db.query(`
      SELECT COUNT(*) as count 
      FROM ai_signals 
      WHERE user_id = $1 
      AND type IN ('mood', 'daily_mood_check') 
      AND DATE(timestamp) = CURRENT_DATE
    `, [userId]);
    
    if (parseInt(dailyLimitCheck.rows[0].count) >= 3) {
      return res.status(429).json({
        success: false,
        message: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–º–∞–∫—Å–∏–º—É–º 3)'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω–∏–º—É–º 8 —á–∞—Å–æ–≤ –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏)
    const intervalCheck = await db.query(`
      SELECT COUNT(*) as count 
      FROM ai_signals 
      WHERE user_id = $1 
      AND type IN ('mood', 'daily_mood_check') 
      AND timestamp > NOW() - INTERVAL '8 hours'
    `, [userId]);
    
    if (parseInt(intervalCheck.rows[0].count) > 0) {
      return res.status(429).json({
        success: false,
        message: '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 8 —á–∞—Å–æ–≤ –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è'
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    const signalResult = await db.query(`
      INSERT INTO ai_signals (
        user_id, type, mood_rating, energy_rating, stress_rating, 
        notes, quality_score, timestamp
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, NOW())
      RETURNING id
    `, [
      userId, 
      'daily_mood_check', 
      mood, 
      energy, 
      stress, 
      notes,
      notes && notes.length >= 30 ? 1.0 : notes && notes.length >= 20 ? 0.8 : notes && notes.length >= 10 ? 0.6 : 0.4
    ]);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const productivityScore = await db.query(`
      SELECT calculate_productivity_score($1, CURRENT_DATE)
    `, [userId]);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await db.query(`
      SELECT * FROM get_user_productivity_stats($1)
    `, [userId]);
    
    res.json({
      success: true,
      message: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ',
      productivityScore: productivityScore.rows[0].calculate_productivity_score,
      stats: stats.rows[0]
    });
    
  } catch (error) {
    console.error('Error in mood-check:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
      error: error.message
    });
  }
});

// POST /api/productivity/activity-log - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
router.post('/activity-log', async (req, res) => {
  try {
    const { userId, activity, category, duration, success, notes, mood, energy, stress } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π –ª–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–µ–Ω—å (–º–∞–∫—Å–∏–º—É–º 5)
    const dailyTotalCheck = await db.query(`
      SELECT COUNT(*) as count 
      FROM ai_signals 
      WHERE user_id = $1 
      AND DATE(timestamp) = CURRENT_DATE
    `, [userId]);
    
    if (parseInt(dailyTotalCheck.rows[0].count) >= 5) {
      return res.status(429).json({
        success: false,
        message: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –æ–±—â–∏–π –ª–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–º–∞–∫—Å–∏–º—É–º 5)'
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const activityResult = await db.query(`
      INSERT INTO ai_signals (
        user_id, type, notes, activity_category, duration_minutes, 
        success_rating, mood_rating, energy_rating, stress_rating,
        quality_score, timestamp
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, NOW())
      RETURNING id
    `, [
      userId,
      'activity_analysis',
      notes,
      category,
      duration,
      success ? 10 : 1, // –£—Å–ø–µ—Ö = 10, –Ω–µ—É–¥–∞—á–∞ = 1
      mood,
      energy,
      stress,
      notes && notes.length >= 30 ? 1.0 : notes && notes.length >= 20 ? 0.8 : notes && notes.length >= 10 ? 0.6 : 0.4
    ]);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const productivityScore = await db.query(`
      SELECT calculate_productivity_score($1, CURRENT_DATE)
    `, [userId]);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await db.query(`
      SELECT * FROM get_user_productivity_stats($1)
    `, [userId]);
    
    res.json({
      success: true,
      message: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∞ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞',
      productivityScore: productivityScore.rows[0].calculate_productivity_score,
      stats: stats.rows[0]
    });
    
  } catch (error) {
    console.error('Error in activity-log:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
      error: error.message
    });
  }
});

// GET /api/productivity/stats/:userId - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
router.get('/stats/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    console.log('üìä Stats request for user:', userId);
    
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
    const mockStats = {
      current_score: 7.8,
      current_level: '–°—Ç–∞–∂–µ—Ä',
      current_tier: 'silver',
      xp_multiplier: 1.1,
      weekly_average: 7.5,
      monthly_average: 7.2,
      mood_stability: 0.8,
      energy_consistency: 0.7,
      stress_management: 0.6,
      total_achievements: 8,
      productivity_achievements: 3
    };
    
    console.log('üìä Returning mock stats:', mockStats);
    
    res.json({
      success: true,
      stats: mockStats
    });
    
  } catch (error) {
    console.error('Error getting productivity stats:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
      error: error.message
    });
  }
});

// GET /api/productivity/dashboard/:userId - –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
router.get('/dashboard/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    console.log('üìä Dashboard request for user:', userId);
    
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ, –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ productivity_dashboard
    const mockDashboard = {
      user_id: parseInt(userId),
      user_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      productivity_score: 7.8,
      productivity_level: '–°—Ç–∞–∂–µ—Ä',
      productivity_tier: 'silver',
      xp_multiplier: 1.1,
      level_icon: 'üöÄ',
      level_color: '#4682B4',
      level_description: '–°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å',
      weekly_productivity: 7.5,
      monthly_productivity: 7.2,
      mood_stability: 0.8,
      energy_consistency: 0.7,
      stress_management: 0.6,
      daily_entries_count: 2,
      weekly_entries_count: 12,
      days_tracked_this_week: 5,
      productivity_achievements_count: 3
    };
    
    console.log('üìä Returning mock dashboard data:', mockDashboard);
    
    res.json({
      success: true,
      dashboard: mockDashboard
    });
    
  } catch (error) {
    console.error('Error getting dashboard data:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞',
      error: error.message
    });
  }
});

// GET /api/productivity/progress/:userId - –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
router.get('/progress/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    console.log('üìä Progress request for user:', userId);
    
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
    const mockProgress = {
      user_id: parseInt(userId),
      user_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      xp: 1250,
      level: 3,
      productivity_score: 7.8,
      productivity_level: '–°—Ç–∞–∂–µ—Ä',
      productivity_tier: 'silver',
      xp_multiplier: 1.1,
      level_icon: 'üöÄ',
      level_color: '#4682B4',
      progress_percentage: 78,
      next_level: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
      score_to_next_level: 2.2
    };
    
    console.log('üìä Returning mock progress data:', mockProgress);
    
    res.json({
      success: true,
      progress: mockProgress
    });
    
  } catch (error) {
    console.error('Error getting progress data:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∞',
      error: error.message
    });
  }
});

// GET /api/productivity/achievements/:userId - –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
router.get('/achievements/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    console.log('üèÜ Achievements request for user:', userId);
    
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
    const mockAchievements = [
      {
        code: 'mood_master',
        name: '–ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
        description: '–ó–∞–ø–∏—Å—ã–≤–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
        category: 'mood',
        xp_reward: 100,
        icon: 'üòä',
        tier: 'bronze',
        unlocked: true,
        unlocked_at: '2024-12-20T10:00:00Z'
      },
      {
        code: 'consistency',
        name: '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å',
        description: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã—à–µ 7.0 –Ω–µ–¥–µ–ª—é',
        category: 'productivity',
        xp_reward: 150,
        icon: 'üìà',
        tier: 'silver',
        unlocked: true,
        unlocked_at: '2024-12-19T15:30:00Z'
      },
      {
        code: 'energy_boost',
        name: '–≠–Ω–µ—Ä–¥–∂–∞–π–∑–µ—Ä',
        description: '–î–æ—Å—Ç–∏–≥ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è —ç–Ω–µ—Ä–≥–∏–∏ 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
        category: 'energy',
        xp_reward: 200,
        icon: '‚ö°',
        tier: 'gold',
        unlocked: false
      },
      {
        code: 'stress_master',
        name: '–ê–Ω—Ç–∏—Å—Ç—Ä–µ—Å—Å',
        description: '–£–ø—Ä–∞–≤–ª—è–ª —Å—Ç—Ä–µ—Å—Å–æ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ –Ω–∏–∂–µ 3.0 –Ω–µ–¥–µ–ª—é',
        category: 'stress',
        xp_reward: 250,
        icon: 'üßò',
        tier: 'platinum',
        unlocked: false
      }
    ];
    
    console.log('üèÜ Returning mock achievements:', mockAchievements.length);
    
    res.json({
      success: true,
      achievements: mockAchievements
    });
    
  } catch (error) {
    console.error('Error getting productivity achievements:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π',
      error: error.message
    });
  }
});

// POST /api/productivity/calculate/:userId - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
router.post('/calculate/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    const { date } = req.body;
    
    const targetDate = date || 'CURRENT_DATE';
    
    const productivityScore = await db.query(`
      SELECT calculate_productivity_score($1, $2)
    `, [userId, targetDate]);
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await db.query(`
      SELECT * FROM get_user_productivity_stats($1)
    `, [userId]);
    
    res.json({
      success: true,
      message: '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞',
      productivityScore: productivityScore.rows[0].calculate_productivity_score,
      stats: stats.rows[0]
    });
    
  } catch (error) {
    console.error('Error calculating productivity:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
      error: error.message
    });
  }
});

// GET /api/productivity/weekly/:userId - –ù–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
router.get('/weekly/:userId', async (req, res) => {
  try {
    const { userId } = req.params;
    console.log('üìä Weekly data request for user:', userId);
    
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
    const mockWeeklyData = [
      {
        date: '2024-12-20',
        final_score: 8.2,
        mood_component: 7.8,
        activity_component: 8.5,
        quality_multiplier: 0.9,
        platform_activity_coefficient: 1.0,
        mood_entries_count: 2,
        activity_entries_count: 1
      },
      {
        date: '2024-12-19',
        final_score: 7.9,
        mood_component: 7.5,
        activity_component: 8.2,
        quality_multiplier: 0.8,
        platform_activity_coefficient: 1.0,
        mood_entries_count: 1,
        activity_entries_count: 2
      },
      {
        date: '2024-12-18',
        final_score: 8.1,
        mood_component: 8.0,
        activity_component: 8.1,
        quality_multiplier: 1.0,
        platform_activity_coefficient: 1.0,
        mood_entries_count: 2,
        activity_entries_count: 1
      }
    ];
    
    console.log('üìä Returning mock weekly data:', mockWeeklyData.length, 'days');
    
    res.json({
      success: true,
      weeklyData: mockWeeklyData
    });
    
  } catch (error) {
    console.error('Error getting weekly data:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
      error: error.message
    });
  }
});

export default router;
