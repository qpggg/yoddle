import { Client } from 'pg';

// üèÜ –§–£–ù–ö–¶–ò–Ø –ü–†–û–í–ï–†–ö–ò –ò –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ò –î–û–°–¢–ò–ñ–ï–ù–ò–ô
async function checkAndUnlockAchievements(client, userId, action) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const progressResult = await client.query(
      'SELECT * FROM user_progress WHERE user_id = $1',
      [userId]
    );
    
    if (!progressResult.rows[0]) return;
    
    const currentProgress = progressResult.rows[0];
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
    const allAchievements = await client.query(`
      SELECT code, requirement_type, requirement_value, requirement_action
      FROM achievements 
      WHERE is_active = true
    `);
    
    // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const unlockedAchievements = await client.query(
      'SELECT achievement_id FROM user_achievements WHERE user_id = $1',
      [userId]
    );
    const unlockedIds = unlockedAchievements.rows.map(row => row.achievement_id);
    
    const achievementsToUnlock = [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    for (const achievement of allAchievements.rows) {
      if (unlockedIds.includes(achievement.code)) continue; // –£–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
      
      let shouldUnlock = false;
      
      switch (achievement.requirement_type) {
        case 'total_xp':
          shouldUnlock = currentProgress.xp >= achievement.requirement_value;
          break;
          
        case 'count':
          if (achievement.requirement_action === 'benefit_added' && action === 'benefit_added') {
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—å–≥–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const benefitsCount = await client.query(
              'SELECT COUNT(*) FROM user_benefits WHERE user_id = $1',
              [userId]
            );
            shouldUnlock = parseInt(benefitsCount.rows[0].count) >= achievement.requirement_value;
          }
          break;
          
        case 'streak':
          if (achievement.requirement_action === 'login') {
            shouldUnlock = currentProgress.login_streak >= achievement.requirement_value;
          }
          break;
          
        case 'custom':
          if (achievement.code === 'profile_complete' && action === 'profile_update') {
            shouldUnlock = currentProgress.profile_completion >= achievement.requirement_value;
          }
          break;
      }
      
      if (shouldUnlock) {
        achievementsToUnlock.push(achievement.code);
      }
    }
    
    // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    for (const achievementId of achievementsToUnlock) {
      await client.query(
        'INSERT INTO user_achievements (user_id, achievement_id) VALUES ($1, $2) ON CONFLICT DO NOTHING',
        [userId, achievementId]
      );
      console.log(`üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ ${achievementId} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    }
    
    return achievementsToUnlock;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', error);
    return [];
  }
}

export default async function handler(req, res) {
  const client = new Client({
    connectionString: process.env.PG_CONNECTION_STRING,
    ssl: { rejectUnauthorized: false }
  });

  try {
    await client.connect();

    if (req.method === 'GET') {
      const { user_id, year, month } = req.query;

      if (!user_id) {
        return res.status(400).json({ error: 'user_id is required' });
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
      const currentDate = new Date();
      const targetYear = year ? parseInt(year) : currentDate.getFullYear();
      const targetMonth = month ? parseInt(month) : currentDate.getMonth() + 1;

      console.log('Activity API: user_id =', user_id, 'year =', targetYear, 'month =', targetMonth);

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
      const daysInMonth = new Date(targetYear, targetMonth, 0).getDate();
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –≤—Å–µ—Ö –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
      const dailyActivity = Array.from({ length: daysInMonth }, (_, i) => ({
        day: i + 1,
        actions: 0
      }));

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      // –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –∏–∑ activity_log (–≥–¥–µ —Ç–æ—á–Ω–æ –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
      const query = `
        SELECT 
          EXTRACT(DAY FROM created_at) as day,
          COUNT(*) as total_actions
        FROM activity_log 
        WHERE user_id = $1 
          AND EXTRACT(YEAR FROM created_at) = $2 
          AND EXTRACT(MONTH FROM created_at) = $3
        GROUP BY EXTRACT(DAY FROM created_at)
        ORDER BY day;
      `;

      const result = await client.query(query, [user_id, targetYear, targetMonth]);

      console.log('Activity API: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:', result.rows);

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      result.rows.forEach(row => {
        const dayIndex = parseInt(row.day) - 1;
        if (dayIndex >= 0 && dayIndex < daysInMonth) {
          dailyActivity[dayIndex].actions = parseInt(row.total_actions);
        }
      });

      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
      const monthNames = [
        '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
        '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
      ];

      await client.end();

      res.status(200).json({
        success: true,
        data: dailyActivity,
        month: monthNames[targetMonth - 1],
        year: targetYear,
        totalActions: dailyActivity.reduce((sum, day) => sum + day.actions, 0)
      });

    } else if (req.method === 'POST') {
      // –ù–æ–≤—ã–π POST –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const { user_id, action, xp_earned = 0, description } = req.body;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!user_id || !action) {
        await client.end();
        return res.status(400).json({ 
          success: false, 
          error: 'user_id –∏ action –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
        });
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è user_id
      const userIdNumber = Number(user_id);
      if (isNaN(userIdNumber) || typeof action !== 'string') {
        await client.end();
        return res.status(400).json({ 
          success: false, 
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º' 
        });
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è XP (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º)
      const xpValue = Number(xp_earned);
      if (isNaN(xpValue) || xpValue < 0) {
        await client.end();
        return res.status(400).json({ 
          success: false, 
          error: 'XP –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º' 
        });
      }

      console.log('Activity API POST: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è user_id:', userIdNumber, 'action:', action);

      // –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const insertQuery = `
        INSERT INTO activity_log (user_id, action, xp_earned, description, created_at)
        VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)
        RETURNING id, created_at;
      `;

      const insertResult = await client.query(insertQuery, [
        userIdNumber, 
        action, 
        xpValue, 
        description || null
      ]);

      console.log('Activity API POST: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞:', insertResult.rows[0]);

      // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ user_progress —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π XP –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        const currentProgressResult = await client.query(
          'SELECT xp FROM user_progress WHERE user_id = $1',
          [userIdNumber]
        );
        
        const currentXP = currentProgressResult.rows[0]?.xp || 0;
        const newXP = currentXP + xpValue;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        let newLevel = 1;
        if (newXP >= 1001) newLevel = 5;
        else if (newXP >= 501) newLevel = 4;
        else if (newXP >= 301) newLevel = 3;
        else if (newXP >= 101) newLevel = 2;

        const updateProgressQuery = `
          UPDATE user_progress 
          SET 
            xp = $2,
            level = $3,
            last_activity = CURRENT_TIMESTAMP,
            updated_at = CURRENT_TIMESTAMP
          WHERE user_id = $1;
        `;
        
        await client.query(updateProgressQuery, [userIdNumber, newXP, newLevel]);
        console.log(`Activity API POST: –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω - XP: ${newXP}, –£—Ä–æ–≤–µ–Ω—å: ${newLevel}`);

        // üèÜ –ü–†–û–í–ï–†–ö–ê –ò –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê –î–û–°–¢–ò–ñ–ï–ù–ò–ô
        if (xpValue > 0) {
          await checkAndUnlockAchievements(client, userIdNumber, action);
        }

      } catch (progressError) {
        console.log('Activity API POST: –¢–∞–±–ª–∏—Ü–∞ user_progress –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', progressError.message);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      }

      await client.end();

      res.status(201).json({
        success: true,
        message: '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
        data: {
          id: insertResult.rows[0].id,
          user_id: userIdNumber,
          action: action,
          xp_earned: xpValue,
          description: description,
          created_at: insertResult.rows[0].created_at
        }
      });

    } else {
      await client.end();
      return res.status(405).json({ 
        success: false, 
        error: 'Method not allowed. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ GET –∏ POST.' 
      });
    }

  } catch (error) {
    console.error('Activity API Error:', error);
    await client.end();
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 
      details: error.message 
    });
  }
} 