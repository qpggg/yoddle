// –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –±–µ–∑ .env
import { Pool } from 'pg';

async function testDirectConnection() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
  
  const connectionString = 'postgresql://postgres.wbgagyckqpkeemztsgka:22kiKggfEG2haS5x@aws-0-eu-north-1.pooler.supabase.com:5432/postgres';
  
  const pool = new Pool({
    connectionString: connectionString,
    ssl: { rejectUnauthorized: false }
  });

  try {
    console.log('üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫:', connectionString.replace(/:[^:]*@/, ':***@'));
    
    const client = await pool.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    const result = await client.query('SELECT NOW() as current_time, version() as pg_version');
    console.log('‚úÖ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:', result.rows[0].current_time);
    console.log('‚úÖ –í–µ—Ä—Å–∏—è PostgreSQL:', result.rows[0].pg_version);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    const tables = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:');
    tables.rows.forEach(row => {
      console.log('  -', row.table_name);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É enter
    try {
      const enterCount = await client.query('SELECT COUNT(*) as count FROM enter');
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ enter:', enterCount.rows[0].count);
    } catch (err) {
      console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ enter –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', err.message);
    }
    
    client.release();
    console.log('üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.code, error.message);
    if (error.code === 'ENOTFOUND') {
      console.log('üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    } else if (error.code === 'ECONNREFUSED') {
      console.log('üîí –°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    }
  } finally {
    await pool.end();
  }
}

testDirectConnection();