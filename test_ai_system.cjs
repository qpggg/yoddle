// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–∏—Å—Ç–µ–º—ã Yoddle
// –ó–∞–ø—É—Å–∫: node test_ai_system.js

const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3001'; // –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–æ—Ä—Ç
const TEST_USER_ID = 1; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID 1

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
const testMoodData = {
    mood: 8,
    activities: ["—Ä–∞–±–æ—Ç–∞", "—Å–ø–æ—Ä—Ç"],
    notes: "–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å! –ó–∞–≤–µ—Ä—à–∏–ª –ø—Ä–æ–µ–∫—Ç",
    stressLevel: 2
};

const testActivityData = {
    activity: "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–∏—Å—Ç–µ–º—ã",
    category: "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
    duration: 120,
    success: true,
    notes: "AI API —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!"
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞ - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é)
async function getAuthToken() {
    // TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ login API
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return 'your_jwt_token_here';
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerHealth() {
    console.log('üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞...');
    try {
        const response = await fetch(`${BASE_URL}/health`);
        if (response.ok) {
            console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
            return true;
        } else {
            console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return false;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
async function testMoodAnalysis() {
    console.log('üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è...');
    try {
        const token = await getAuthToken();
        const response = await fetch(`${BASE_URL}/api/ai/analyze-mood`, {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json', 
                'Authorization': `Bearer ${token}` 
            },
            body: JSON.stringify(testMoodData)
        });
        
        const data = await response.json();
        if (response.ok) {
            console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —É—Å–ø–µ—à–µ–Ω:');
            console.log('üìä –ê–Ω–∞–ª–∏–∑:', data.analysis);
            console.log('üÜî ID —Å–∏–≥–Ω–∞–ª–∞:', data.signalId);
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è:', data.error);
        }
        return response.ok;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async function testActivityLogging() {
    console.log('üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...');
    try {
        const token = await getAuthToken();
        const response = await fetch(`${BASE_URL}/api/ai/log-activity`, {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json', 
                'Authorization': `Bearer ${token}` 
            },
            body: JSON.stringify(testActivityData)
        });
        
        const data = await response.json();
        if (response.ok) {
            console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞:');
            console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:', data.recommendation);
            console.log('üÜî ID —Å–∏–≥–Ω–∞–ª–∞:', data.signalId);
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', data.error);
        }
        return response.ok;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤
async function testGetInsights() {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤...');
    try {
        const token = await getAuthToken();
        const response = await fetch(`${BASE_URL}/api/ai/insights/${TEST_USER_ID}`, {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        
        const data = await response.json();
        if (response.ok) {
            console.log('‚úÖ –ò–Ω—Å–∞–π—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã:');
            console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Å–∞–π—Ç–æ–≤:', data.insights.length);
            if (data.insights.length > 0) {
                console.log('üí° –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω—Å–∞–π—Ç:', data.insights[0].content.substring(0, 100) + '...');
            }
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å–∞–π—Ç–æ–≤:', data.error);
        }
        return response.ok;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
async function testGetRecommendations() {
    console.log('üí° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π...');
    try {
        const token = await getAuthToken();
        const response = await fetch(`${BASE_URL}/api/ai/recommendations`, {
            headers: { 'Authorization': `Bearer ${token}` }
        });
        
        const data = await response.json();
        if (response.ok) {
            console.log('‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã:');
            console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', data.recommendations.length);
            if (data.recommendations.length > 0) {
                console.log('üí° –ü–æ—Å–ª–µ–¥–Ω—è—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:', data.recommendations[0].message.substring(0, 80) + '...');
            }
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:', data.error);
        }
        return response.ok;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        return false;
    }
}

// –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞
async function testWeeklyInsight() {
    console.log('üìÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞...');
    try {
        const token = await getAuthToken();
        const response = await fetch(`${BASE_URL}/api/ai/generate-daily-insight`, {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json', 
                'Authorization': `Bearer ${token}` 
            }
        });
        
        const data = await response.json();
        if (response.ok) {
            console.log('‚úÖ –ù–µ–¥–µ–ª—å–Ω—ã–π –∏–Ω—Å–∞–π—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:');
            console.log('üí° –ò–Ω—Å–∞–π—Ç:', data.insight.substring(0, 100) + '...');
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–∞:', data.error);
        }
        return response.ok;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        return false;
    }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ AI —Å–∏—Å—Ç–µ–º—ã...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
    const serverHealthy = await checkServerHealth();
    if (!serverHealthy) {
        console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç—ã –ø—Ä–µ—Ä–≤–∞–Ω—ã');
        return;
    }
    
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:\n');
    
    const results = {
        moodAnalysis: await testMoodAnalysis(),
        activityLogging: await testActivityLogging(),
        getInsights: await testGetInsights(),
        getRecommendations: await testGetRecommendations(),
        weeklyInsight: await testWeeklyInsight()
    };
    
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:');
    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã:', Object.values(results).filter(Boolean).length);
    console.log('‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:', Object.values(results).filter(r => !r).length);
    
    if (Object.values(results).every(Boolean)) {
        console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    } else {
        console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.');
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    runAllTests().catch(console.error);
}

module.exports = {
    runAllTests,
    testMoodAnalysis,
    testActivityLogging,
    testGetInsights,
    testGetRecommendations,
    testWeeklyInsight
};
