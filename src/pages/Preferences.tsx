import React, { useState } from 'react';
import { Box, Container, Typography, Card, CardContent, Button, Radio, RadioGroup, FormControlLabel, FormControl, LinearProgress } from '@mui/material';
import { motion } from 'framer-motion';

interface Question {
  id: number;
  question: string;
  options: { value: string; label: string; emoji: string }[];
}

const questions: Question[] = [
  {
    id: 1,
    question: "–ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ –≤ —Ä–∞–±–æ—Ç–µ?",
    options: [
      { value: "health", label: "–ó–¥–æ—Ä–æ–≤—å–µ –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ", emoji: "üè•" },
      { value: "growth", label: "–†–∞–∑–≤–∏—Ç–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ", emoji: "üìö" },
      { value: "balance", label: "–ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—Ç—ã –∏ –∂–∏–∑–Ω–∏", emoji: "‚öñÔ∏è" },
      { value: "finance", label: "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", emoji: "üí∞" }
    ]
  },
  {
    id: 2,
    question: "–ö–∞–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è?",
    options: [
      { value: "sport", label: "–°–ø–æ—Ä—Ç –∏ —Ñ–∏—Ç–Ω–µ—Å", emoji: "üèÉ‚Äç‚ôÇÔ∏è" },
      { value: "family", label: "–í—Ä–µ–º—è —Å —Å–µ–º—å–µ–π", emoji: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶" },
      { value: "travel", label: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", emoji: "‚úàÔ∏è" },
      { value: "culture", label: "–ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", emoji: "üé≠" }
    ]
  },
  {
    id: 3,
    question: "–ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç?",
    options: [
      { value: "recognition", label: "–ü—Ä–∏–∑–Ω–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π", emoji: "üèÜ" },
      { value: "flexibility", label: "–ì–∏–±–∫–æ—Å—Ç—å –≤ —Ä–∞–±–æ—Ç–µ", emoji: "üîÑ" },
      { value: "team", label: "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ", emoji: "üë•" },
      { value: "innovation", label: "–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", emoji: "üí°" }
    ]
  },
  {
    id: 4,
    question: "–ö–∞–∫–æ–π —Ç–∏–ø –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–∞–º –Ω—É–∂–µ–Ω –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
    options: [
      { value: "medical", label: "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", emoji: "ü©∫" },
      { value: "educational", label: "–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", emoji: "üéì" },
      { value: "social", label: "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", emoji: "ü§ù" },
      { value: "financial", label: "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", emoji: "üí≥" }
    ]
  }
];

const Preferences: React.FC = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<Record<number, string>>({});
  const [showResults, setShowResults] = useState(false);

  const handleAnswer = (questionId: number, value: string) => {
    setAnswers(prev => ({ ...prev, [questionId]: value }));
  };

  const handleNext = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(prev => prev + 1);
    } else {
      setShowResults(true);
    }
  };

  const handlePrevious = () => {
    if (currentQuestion > 0) {
      setCurrentQuestion(prev => prev - 1);
    }
  };

  const restartTest = () => {
    setCurrentQuestion(0);
    setAnswers({});
    setShowResults(false);
  };

  const getRecommendations = () => {
    const values = Object.values(answers);
    const healthCount = values.filter(v => ['health', 'medical', 'sport'].includes(v)).length;
    const growthCount = values.filter(v => ['growth', 'educational', 'innovation'].includes(v)).length;
    const balanceCount = values.filter(v => ['balance', 'family', 'flexibility'].includes(v)).length;
    const financeCount = values.filter(v => ['finance', 'financial'].includes(v)).length;

    if (healthCount >= 2) return { type: "–ó–¥–æ—Ä–æ–≤—å–µ –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ", emoji: "üè•", benefits: ["–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ", "–§–∏—Ç–Ω–µ—Å-–∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã", "–ú–∞—Å—Å–∞–∂ –∏ SPA"] };
    if (growthCount >= 2) return { type: "–†–∞–∑–≤–∏—Ç–∏–µ –∏ –∫–∞—Ä—å–µ—Ä–∞", emoji: "üìö", benefits: ["–ö—É—Ä—Å—ã –∏ —Ç—Ä–µ–Ω–∏–Ω–≥–∏", "–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏", "–ö–æ—É—á–∏–Ω–≥"] };
    if (balanceCount >= 2) return { type: "Work-Life Balance", emoji: "‚öñÔ∏è", benefits: ["–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫", "–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤—ã—Ö–æ–¥–Ω—ã–µ"] };
    if (financeCount >= 2) return { type: "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ª—å–≥–æ—Ç—ã", emoji: "üí∞", benefits: ["–ë–æ–Ω—É—Å—ã", "–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏", "–ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"] };
    
    return { type: "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–∞–∫–µ—Ç", emoji: "üåü", benefits: ["–°–º–µ—à–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –ª—å–≥–æ—Ç", "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥", "–ì–∏–±–∫–∏–µ —É—Å–ª–æ–≤–∏—è"] };
  };

  const progress = ((currentQuestion + 1) / questions.length) * 100;

  if (showResults) {
    const recommendation = getRecommendations();
    return (
      <Container maxWidth="md" sx={{ py: 4 }}>
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.6 }}
        >
          <Card sx={{ p: 4, textAlign: 'center', border: '3px solid #750000' }}>
            <Typography variant="h3" sx={{ mb: 2, color: '#750000' }}>
              üéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê ‚úÖ
            </Typography>
            <Typography variant="h4" sx={{ mb: 3, color: '#333' }}>
              {recommendation.emoji} {recommendation.type}
            </Typography>
            <Typography variant="body1" sx={{ mb: 4, color: '#666', fontSize: '1.1rem' }}>
              –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö, –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –ª—å–≥–æ—Ç—ã:
            </Typography>
            <Box sx={{ mb: 4 }}>
              {recommendation.benefits.map((benefit, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.2 }}
                >
                  <Typography 
                    variant="h6" 
                    sx={{ 
                      mb: 2, 
                      p: 2, 
                      backgroundColor: '#f8f8f8', 
                      borderRadius: 2,
                      color: '#750000',
                      fontWeight: 600
                    }}
                  >
                    ‚úÖ {benefit}
                  </Typography>
                </motion.div>
              ))}
            </Box>
            <Button
              variant="contained"
              size="large"
              onClick={restartTest}
              sx={{
                backgroundColor: '#750000',
                '&:hover': { backgroundColor: '#8B0000' },
                px: 4,
                py: 1.5,
                mr: 2
              }}
            >
              üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ
            </Button>
            <Button
              variant="outlined"
              size="large"
              sx={{
                borderColor: '#750000',
                color: '#750000',
                px: 4,
                py: 1.5
              }}
            >
              üìã –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            </Button>
          </Card>
        </motion.div>
      </Container>
    );
  }

  const question = questions[currentQuestion];

  return (
    <Container maxWidth="md" sx={{ py: 4 }}>
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >
        <Box sx={{ mb: 4, textAlign: 'center' }}>
          <Typography variant="h4" sx={{ mb: 2, color: '#750000', fontWeight: 700 }}>
            üéØ –¢–ï–°–¢ –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–ô –õ–¨–ì–û–¢ ‚úÖ
          </Typography>
          <Typography variant="h6" sx={{ color: '#666', mb: 3 }}>
            –£–∑–Ω–∞–π—Ç–µ, –∫–∞–∫–∏–µ –ª—å–≥–æ—Ç—ã –ø–æ–¥—Ö–æ–¥—è—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º
          </Typography>
          <LinearProgress 
            variant="determinate" 
            value={progress} 
            sx={{ 
              height: 8, 
              borderRadius: 4,
              backgroundColor: '#f0f0f0',
              '& .MuiLinearProgress-bar': {
                backgroundColor: '#750000'
              }
            }} 
          />
          <Typography variant="body2" sx={{ mt: 1, color: '#666' }}>
            –í–æ–ø—Ä–æ—Å {currentQuestion + 1} –∏–∑ {questions.length}
          </Typography>
        </Box>

        <motion.div
          key={currentQuestion}
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: -50 }}
          transition={{ duration: 0.4 }}
        >
          <Card sx={{ p: 4, border: '2px solid #750000' }}>
            <Typography variant="h5" sx={{ mb: 4, color: '#333', fontWeight: 600, textAlign: 'center' }}>
              {question.question}
            </Typography>
            
            <FormControl component="fieldset" sx={{ width: '100%' }}>
              <RadioGroup
                value={answers[question.id] || ''}
                onChange={(e) => handleAnswer(question.id, e.target.value)}
              >
                {question.options.map((option, index) => (
                  <motion.div
                    key={option.value}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                  >
                    <FormControlLabel
                      value={option.value}
                      control={<Radio sx={{ color: '#750000', '&.Mui-checked': { color: '#750000' } }} />}
                      label={
                        <Box sx={{ display: 'flex', alignItems: 'center', py: 1 }}>
                          <Typography variant="h6" sx={{ mr: 2 }}>
                            {option.emoji}
                          </Typography>
                          <Typography variant="body1" sx={{ fontWeight: 500 }}>
                            {option.label}
                          </Typography>
                        </Box>
                      }
                      sx={{
                        width: '100%',
                        m: 0,
                        p: 2,
                        borderRadius: 2,
                        border: '1px solid #e0e0e0',
                        mb: 2,
                        '&:hover': {
                          backgroundColor: '#f8f8f8',
                          borderColor: '#750000'
                        },
                        '&.Mui-checked': {
                          backgroundColor: '#fff5f5',
                          borderColor: '#750000'
                        }
                      }}
                    />
                  </motion.div>
                ))}
              </RadioGroup>
            </FormControl>

            <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 4 }}>
              <Button
                onClick={handlePrevious}
                disabled={currentQuestion === 0}
                variant="outlined"
                sx={{
                  borderColor: '#750000',
                  color: '#750000',
                  '&:disabled': { opacity: 0.5 }
                }}
              >
                ‚Üê –ù–∞–∑–∞–¥
              </Button>
              <Button
                onClick={handleNext}
                disabled={!answers[question.id]}
                variant="contained"
                sx={{
                  backgroundColor: '#750000',
                  '&:hover': { backgroundColor: '#8B0000' },
                  '&:disabled': { opacity: 0.5 }
                }}
              >
                {currentQuestion === questions.length - 1 ? '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç' : '–î–∞–ª–µ–µ ‚Üí'}
              </Button>
            </Box>
          </Card>
        </motion.div>
      </motion.div>
    </Container>
  );
};

export default Preferences; 