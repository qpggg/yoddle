import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { useWallet } from '../hooks/useWallet';

interface User {
  id: number;
  name: string;
  email: string;
}

const Wallet: React.FC = () => {
  const [user, setUser] = useState<User | null>(null);
  const [selectedPeriod, setSelectedPeriod] = useState<string>('month');
  const [transactionsLimit, setTransactionsLimit] = useState(20);

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
  useEffect(() => {
    const userData = localStorage.getItem('user');
    if (userData) {
      setUser(JSON.parse(userData));
    }
  }, []);

  const { 
    wallet, 
    transactions, 
    loading, 
    error, 
    refreshWallet, 
    fetchTransactions 
  } = useWallet();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
  useEffect(() => {
    if (user) {
      fetchTransactions(transactionsLimit, selectedPeriod);
    }
  }, [selectedPeriod, transactionsLimit, user]);

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getTransactionIcon = (type: string) => {
    switch (type) {
      case 'credit':
      case 'admin_add':
      case 'monthly_allowance':
        return '‚ûï';
      case 'debit':
      case 'benefit_purchase':
        return 'üõí';
      case 'admin_remove':
        return '‚ûñ';
      default:
        return 'üí∞';
    }
  };

  const getTransactionColor = (type: string) => {
    return type.includes('credit') || type.includes('add') || type.includes('allowance') 
      ? 'text-green-600' 
      : 'text-red-600';
  };

  const getTransactionDescription = (type: string) => {
    switch (type) {
      case 'credit':
        return '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ';
      case 'admin_add':
        return '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º';
      case 'monthly_allowance':
        return '–ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ';
      case 'debit':
        return '–°–ø–∏—Å–∞–Ω–∏–µ';
      case 'benefit_purchase':
        return '–ü–æ–∫—É–ø–∫–∞ –ª—å–≥–æ—Ç—ã';
      case 'admin_remove':
        return '–°–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º';
      default:
        return '–û–ø–µ—Ä–∞—Ü–∏—è';
    }
  };

  if (!user) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
          <p className="text-gray-600">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—à–µ–ª—å–∫—É</p>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-purple-600"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-red-600 mb-4">–û—à–∏–±–∫–∞</h2>
          <p className="text-gray-600 mb-4">{error}</p>
          <button
            onClick={refreshWallet}
            className="px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            üí∞ –ú–æ–π –∫–æ—à–µ–ª–µ–∫
          </h1>
          <p className="text-gray-600">
            –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–∏–º–∏ Yoddle-–∫–æ–∏–Ω–∞–º–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
          </p>
        </motion.div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
            className="lg:col-span-2"
          >
            <div className="bg-gradient-to-br from-purple-600 to-indigo-700 rounded-xl shadow-lg p-8 text-white mb-8">
              <div className="flex items-center justify-between mb-6">
                <div>
                  <h2 className="text-2xl font-bold">–í–∞—à –±–∞–ª–∞–Ω—Å</h2>
                  <p className="text-purple-100">
                    {wallet?.company_name && `${wallet.company_name} ‚Ä¢ `}
                    {user.name}
                  </p>
                </div>
                <button
                  onClick={refreshWallet}
                  className="p-2 bg-white/20 rounded-lg hover:bg-white/30 transition-colors"
                  title="–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å"
                >
                  üîÑ
                </button>
              </div>

              <div className="mb-8">
                <div className="text-5xl font-bold mb-2">
                  {wallet?.balance.toFixed(2) || '0.00'}
                  <span className="text-2xl font-normal ml-2">Y-–∫–æ–∏–Ω–æ–≤</span>
                </div>
                {wallet?.coins_per_employee && (
                  <p className="text-purple-100">
                    –ï–∂–µ–º–µ—Å—è—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ: {wallet.coins_per_employee} –∫–æ–∏–Ω–æ–≤
                  </p>
                )}
              </div>

              <div className="grid grid-cols-2 gap-6">
                <div className="bg-white/10 rounded-lg p-4">
                  <div className="text-purple-100 text-sm mb-1">–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ</div>
                  <div className="text-2xl font-semibold">
                    {wallet?.total_earned.toFixed(2) || '0.00'}
                  </div>
                </div>
                <div className="bg-white/10 rounded-lg p-4">
                  <div className="text-purple-100 text-sm mb-1">–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ</div>
                  <div className="text-2xl font-semibold">
                    {wallet?.total_spent.toFixed(2) || '0.00'}
                  </div>
                </div>
              </div>
            </div>

            {/* –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-xl font-bold text-gray-900">–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</h3>
                
                <div className="flex space-x-4">
                  <select
                    value={selectedPeriod}
                    onChange={(e) => setSelectedPeriod(e.target.value)}
                    className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-purple-500 focus:border-purple-500"
                  >
                    <option value="week">–ù–µ–¥–µ–ª—è</option>
                    <option value="month">–ú–µ—Å—è—Ü</option>
                    <option value="year">–ì–æ–¥</option>
                    <option value="">–í—Å–µ –≤—Ä–µ–º—è</option>
                  </select>

                  <select
                    value={transactionsLimit}
                    onChange={(e) => setTransactionsLimit(parseInt(e.target.value))}
                    className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-purple-500 focus:border-purple-500"
                  >
                    <option value={10}>10 –∑–∞–ø–∏—Å–µ–π</option>
                    <option value={20}>20 –∑–∞–ø–∏—Å–µ–π</option>
                    <option value={50}>50 –∑–∞–ø–∏—Å–µ–π</option>
                    <option value={100}>100 –∑–∞–ø–∏—Å–µ–π</option>
                  </select>
                </div>
              </div>

              {transactions.length === 0 ? (
                <div className="text-center py-12 text-gray-500">
                  <div className="text-6xl mb-4">üìã</div>
                  <h4 className="text-lg font-medium mb-2">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</h4>
                  <p>–í–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
                </div>
              ) : (
                <div className="space-y-4">
                  {transactions.map((transaction) => (
                    <motion.div
                      key={transaction.id}
                      initial={{ opacity: 0, x: -20 }}
                      animate={{ opacity: 1, x: 0 }}
                      className="flex items-center justify-between p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
                    >
                      <div className="flex items-center space-x-4">
                        <div className="text-2xl">
                          {getTransactionIcon(transaction.type)}
                        </div>
                        <div>
                          <div className="font-medium text-gray-900">
                            {transaction.description}
                          </div>
                          <div className="text-sm text-gray-500">
                            {getTransactionDescription(transaction.type)} ‚Ä¢ {formatDate(transaction.created_at)}
                          </div>
                          {transaction.processed_by && (
                            <div className="text-xs text-gray-400">
                              –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {transaction.processed_by}
                            </div>
                          )}
                        </div>
                      </div>
                      
                      <div className="text-right">
                        <div className={`text-lg font-semibold ${getTransactionColor(transaction.type)}`}>
                          {transaction.type.includes('credit') || transaction.type.includes('add') || transaction.type.includes('allowance') ? '+' : '-'}
                          {transaction.amount.toFixed(2)}
                        </div>
                        <div className="text-sm text-gray-500">
                          –ë–∞–ª–∞–Ω—Å: {transaction.balance_after.toFixed(2)}
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              )}
            </div>
          </motion.div>

          {/* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
            className="space-y-6"
          >
            {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h3 className="text-lg font-bold text-gray-900 mb-4">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
              <div className="space-y-3">
                <button
                  onClick={() => window.location.href = '/my-benefits'}
                  className="w-full flex items-center justify-between p-3 bg-purple-50 text-purple-700 rounded-lg hover:bg-purple-100 transition-colors"
                >
                  <span className="flex items-center">
                    üõí <span className="ml-2">–ü–æ—Ç—Ä–∞—Ç–∏—Ç—å –∫–æ–∏–Ω—ã</span>
                  </span>
                  <span>‚Üí</span>
                </button>
                
                <button
                  onClick={() => fetchTransactions(transactionsLimit, selectedPeriod)}
                  className="w-full flex items-center justify-between p-3 bg-gray-50 text-gray-700 rounded-lg hover:bg-gray-100 transition-colors"
                >
                  <span className="flex items-center">
                    üîÑ <span className="ml-2">–û–±–Ω–æ–≤–∏—Ç—å</span>
                  </span>
                </button>
              </div>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞—Ä–∏—Ñ–µ */}
            {wallet?.company_name && (
              <div className="bg-white rounded-xl shadow-lg p-6">
                <h3 className="text-lg font-bold text-gray-900 mb-4">–í–∞—à —Ç–∞—Ä–∏—Ñ</h3>
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-gray-600">–ö–æ–º–ø–∞–Ω–∏—è:</span>
                    <span className="font-medium">{wallet.company_name}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">–ö–æ–∏–Ω–æ–≤/–º–µ—Å—è—Ü:</span>
                    <span className="font-medium">{wallet.coins_per_employee}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</span>
                    <span className="font-medium text-sm">
                      {formatDate(wallet.updated_at)}
                    </span>
                  </div>
                </div>
              </div>
            )}

            {/* –ü–æ–º–æ—â—å */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h3 className="text-lg font-bold text-gray-900 mb-4">–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?</h3>
              <p className="text-gray-600 text-sm mb-4">
                –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–∏–Ω–æ–≤, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
              </p>
              <button className="w-full px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">
                –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
              </button>
            </div>
          </motion.div>
        </div>
      </div>
    </div>
  );
};

export default Wallet;