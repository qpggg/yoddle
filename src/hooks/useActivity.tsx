import { useState } from 'react';
import { useUser } from './useUser';

export interface ActivityEntry {
  id?: number;
  user_id: number;
  action: string;
  xp_earned?: number;
  description?: string;
  created_at?: string;
}

interface AddActivityData {
  action: string;
  xp_earned?: number;
  description?: string;
}

export const useActivity = () => {
  const { user } = useUser();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [recentActions, setRecentActions] = useState<Set<string>>(new Set());

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const addActivity = async (activityData: AddActivityData): Promise<boolean> => {
    if (!user?.id) {
      setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return false;
    }

    // üõ°Ô∏è –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø (–¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ø–æ –∫–ª—é—á—É)
    const recentKey = `${user.id}-${activityData.action}`;
    
    if (recentActions.has(recentKey)) {
      console.log('useActivity: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', activityData.action);
      return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    setRecentActions(prev => new Set([...prev, recentKey]));
    
    // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É (–∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞)
    setTimeout(() => {
      setRecentActions(prev => {
        const newSet = new Set(prev);
        newSet.delete(recentKey);
        return newSet;
      });
    }, 1000);

    setIsLoading(true);
    setError(null);

    try {
      const response = await fetch('/api/activity', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          user_id: Number(user.id), // ‚úÖ –ö–û–ù–í–ï–†–¢–ò–†–£–ï–ú –í NUMBER
          ...activityData
        }),
      });

      const result = await response.json();

      if (!response.ok || !result.success) {
        throw new Error(result.error || `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`);
      }

      console.log('useActivity: –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞:', result.data);
      return true;

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      console.error('useActivity: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', errorMessage, err);
      
      // üö® –ù–ï –ë–õ–û–ö–ò–†–£–ï–ú UI –ò–ó-–ó–ê –û–®–ò–ë–û–ö API
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  // –ë—ã—Å—Ç—Ä—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
  const logLogin = async (description = '–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É') => {
    return await addActivity({
      action: 'login',
      xp_earned: 10,
      description
    });
  };

  const logProfileUpdate = async (description = '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è') => {
    return await addActivity({
      action: 'profile_update',
      xp_earned: 25,
      description
    });
  };

  const logBenefitAdded = async (benefitName?: string) => {
    return await addActivity({
      action: 'benefit_added',
      xp_earned: 50,
      description: benefitName ? `–î–æ–±–∞–≤–ª–µ–Ω–∞ –ª—å–≥–æ—Ç–∞: ${benefitName}` : '–î–æ–±–∞–≤–ª–µ–Ω–∞ –ª—å–≥–æ—Ç–∞'
    });
  };

  const logBenefitUsed = async (benefitName?: string) => {
    return await addActivity({
      action: 'benefit_used',
      xp_earned: 25,
      description: benefitName ? `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ª—å–≥–æ—Ç–∞: ${benefitName}` : '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ª—å–≥–æ—Ç–∞'
    });
  };

  const logCustomActivity = async (action: string, xp: number, description?: string) => {
    return await addActivity({
      action,
      xp_earned: xp,
      description
    });
  };

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isLoading,
    error,
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    addActivity,
    
    // –ë—ã—Å—Ç—Ä—ã–µ –º–µ—Ç–æ–¥—ã
    logLogin,
    logProfileUpdate,
    logBenefitAdded,
    logBenefitUsed,
    logCustomActivity
  };
}; 