import { useState, useEffect, useCallback } from 'react';

interface Notification {
  id: number;
  type_name: string;
  type_icon: string;
  type_color: string;
  title: string;
  message: string;
  priority: number;
  link_url?: string;
  created_at: string;
  is_read?: boolean;
}

interface UseNotificationsProps {
  userId?: string | null;
  autoRefresh?: boolean;
  refreshInterval?: number;
}

export const useNotifications = ({ 
  userId, 
  autoRefresh = true, 
  refreshInterval = 30000 
}: UseNotificationsProps = {}) => {
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const fetchUnreadNotifications = useCallback(async () => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await fetch(`/api/notifications?action=unread${userId ? `&user_id=${userId}` : ''}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
      if (!response.ok) {
        setError('üì¢ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.');
        setNotifications([]);
        setUnreadCount(0);
        return;
      }
      
      const data = await response.json();
      
      if (data.success) {
        setNotifications(data.data || []);
        setUnreadCount(data.count || 0);
      } else {
        setError(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      }
    } catch (err) {
      console.warn('üì¢ Notifications system not ready:', err instanceof Error ? err.message : 'Unknown error');
      setError('üì¢ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.');
      setNotifications([]);
      setUnreadCount(0);
    } finally {
      setLoading(false);
    }
  }, [userId]);

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
  const fetchUnreadCount = useCallback(async () => {
    try {
      const response = await fetch(`/api/notifications?action=count${userId ? `&user_id=${userId}` : ''}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
      if (!response.ok) {
        console.warn('üì¢ Notifications API not available:', response.status);
        setUnreadCount(0);
        return;
      }
      
      const data = await response.json();
      
      if (data.success) {
        setUnreadCount(data.count || 0);
      } else {
        setUnreadCount(0);
      }
    } catch (err) {
      console.warn('üì¢ Notifications system not ready:', err instanceof Error ? err.message : 'Unknown error');
      setUnreadCount(0);
    }
  }, [userId]);

  // –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  const markAsRead = useCallback(async (notificationId: number) => {
    try {
      const response = await fetch(
        `/api/notifications?action=mark-read&notification_id=${notificationId}${userId ? `&user_id=${userId}` : ''}`,
        { method: 'PUT' }
      );
      
      const data = await response.json();
      
      if (data.success) {
        // –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
        setNotifications(prev => prev.filter(n => n.id !== notificationId));
        // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        setUnreadCount(prev => Math.max(0, prev - 1));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        if ((window as any).updateNotificationCount) {
          (window as any).updateNotificationCount();
        }
      }
      
      return data.success;
    } catch (err) {
      console.error('Error marking notification as read:', err);
      return false;
    }
  }, [userId]);

  // –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
  const markAllAsRead = useCallback(async () => {
    try {
      const response = await fetch(
        `/api/notifications?action=mark-all-read${userId ? `&user_id=${userId}` : ''}`,
        { method: 'PUT' }
      );
      
      const data = await response.json();
      
      if (data.success) {
        setNotifications([]);
        setUnreadCount(0);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
        if ((window as any).updateNotificationCount) {
          (window as any).updateNotificationCount();
        }
      }
      
      return data.success;
    } catch (err) {
      console.error('Error marking all notifications as read:', err);
      return false;
    }
  }, [userId]);

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
  const createNotification = useCallback(async (notification: {
    type_name: string;
    title: string;
    message: string;
    is_global?: boolean;
    priority?: number;
    link_url?: string;
  }) => {
    try {
      const response = await fetch(
        `/api/notifications?action=create${userId ? `&user_id=${userId}` : ''}`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(notification),
        }
      );
      
      const data = await response.json();
      
      if (data.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await fetchUnreadNotifications();
      }
      
      return data;
    } catch (err) {
      console.error('Error creating notification:', err);
      return { success: false, error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' };
    }
  }, [userId, fetchUnreadNotifications]);

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
  const fetchRecentNotifications = useCallback(async (limit: number = 5) => {
    try {
      const response = await fetch(
        `/api/notifications?action=recent&limit=${limit}${userId ? `&user_id=${userId}` : ''}`
      );
      const data = await response.json();
      
      return data.success ? data.data : [];
    } catch (err) {
      console.error('Error fetching recent notifications:', err);
      return [];
    }
  }, [userId]);

  // Auto-refresh
  useEffect(() => {
    if (autoRefresh) {
      fetchUnreadCount(); // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
      
      const interval = setInterval(fetchUnreadCount, refreshInterval);
      
      return () => clearInterval(interval);
    }
  }, [fetchUnreadCount, autoRefresh, refreshInterval]);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    notifications,
    unreadCount,
    loading,
    error,
    
    // –ú–µ—Ç–æ–¥—ã
    fetchUnreadNotifications,
    fetchUnreadCount,
    markAsRead,
    markAllAsRead,
    createNotification,
    fetchRecentNotifications,
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
    refresh: fetchUnreadNotifications,
    refreshCount: fetchUnreadCount,
  };
}; 