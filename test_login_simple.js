import fetch from 'node-fetch';

const BASE_URL = 'http://localhost:3000';

async function testSimpleLogin() {
  console.log('üöÄ –¢–ï–°–¢ –ü–†–û–°–¢–û–ì–û –í–•–û–î–ê (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è)');
  console.log('================================================\n');
  
  const startTime = Date.now();
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—Ä–æ—Å—Ç—ã–º –ø–∞—Ä–æ–ª–µ–º (–Ω–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º)
    const response = await fetch(`${BASE_URL}/api/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        login: 'test@gmail.com',
        password: 'test'
      })
    });
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    if (response.ok) {
      const data = await response.json();
      console.log(`‚úÖ –ü—Ä–æ—Å—Ç–æ–π –≤—Ö–æ–¥: ${duration}ms`);
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${data.user.name}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î
      const dbResponse = await fetch(`${BASE_URL}/api/check-password-hash?login=test@gmail.com`);
      if (dbResponse.ok) {
        const hashData = await dbResponse.json();
        console.log(`üîë –ü–∞—Ä–æ–ª—å –≤ –ë–î: ${hashData.isHashed ? '–•–µ—à–∏—Ä–æ–≤–∞–Ω ‚úÖ' : '–ù–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω ‚ùå'}`);
      }
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${duration}ms`);
      const errorData = await response.json();
      console.log(`üìù –û—à–∏–±–∫–∞: ${errorData.error}`);
    }
    
    return { success: response.ok, duration };
  } catch (error) {
    const endTime = Date.now();
    const duration = endTime - startTime;
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${duration}ms - ${error.message}`);
    return { success: false, duration, error: error.message };
  }
}

async function testDatabaseConnection() {
  console.log('\nüîç –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–î');
  console.log('==========================\n');
  
  const startTime = Date.now();
  
  try {
    // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î
    const response = await fetch(`${BASE_URL}/api/benefits`);
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    if (response.ok) {
      console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –∫ –ë–î: ${duration}ms`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ë–î: ${duration}ms`);
    }
    
    return { success: response.ok, duration };
  } catch (error) {
    const endTime = Date.now();
    const duration = endTime - startTime;
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${duration}ms - ${error.message}`);
    return { success: false, duration, error: error.message };
  }
}

async function runDiagnostics() {
  const loginResult = await testSimpleLogin();
  await new Promise(resolve => setTimeout(resolve, 1000));
  const dbResult = await testDatabaseConnection();
  
  console.log('\nüìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:');
  console.log('================');
  
  if (loginResult.duration > 1000) {
    console.log('üö® –ü–†–û–ë–õ–ï–ú–ê: –í—Ö–æ–¥ —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π');
    console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('   - bcrypt.compare –º–µ–¥–ª–µ–Ω–Ω—ã–π');
    console.log('   - –°–µ—Ç–µ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ Supabase');
    console.log('   - –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –ë–î');
  } else {
    console.log('‚úÖ –í—Ö–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
  }
  
  if (dbResult.duration > 500) {
    console.log('üö® –ü–†–û–ë–õ–ï–ú–ê: –ë–î –º–µ–¥–ª–µ–Ω–Ω–∞—è');
    console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('   - –°–µ—Ç–µ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ Supabase');
    console.log('   - –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã');
  } else {
    console.log('‚úÖ –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
  }
  
  console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  if (loginResult.duration > 1000 && dbResult.duration < 500) {
    console.log('- –ü—Ä–æ–±–ª–µ–º–∞ –≤ bcrypt.compare');
    console.log('- –ù—É–∂–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª–µ–π');
  } else if (loginResult.duration > 1000 && dbResult.duration > 500) {
    console.log('- –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Å–µ—Ç–µ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–µ Supabase');
    console.log('- –ù—É–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –ë–î –∏–ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ');
  }
}

runDiagnostics().catch(console.error); 