import fetch from 'node-fetch';

const BASE_URL = 'http://localhost:3000';

async function testGamification() {
  console.log('üéÆ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ô–ú–ò–§–ò–ö–ê–¶–ò–ò');
  console.log('==============================\n');
  
  const startTime = Date.now();
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –≤—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
    const loginResponse = await fetch(`${BASE_URL}/api/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        login: 'test@gmail.com',
        password: 'test'
      })
    });
    
    if (!loginResponse.ok) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      return;
    }
    
    const loginData = await loginResponse.json();
    const userId = loginData.user.id;
    
    console.log(`‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${loginData.user.name}`);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é
    const gamificationResponse = await fetch(`${BASE_URL}/api/gamification/login`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        user_id: userId
      })
    });
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    if (gamificationResponse.ok) {
      const gamificationData = await gamificationResponse.json();
      
      console.log(`‚úÖ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è: ${duration}ms`);
      console.log(`üéØ –û–±—â–∏–π XP: ${gamificationData.totalXP}`);
      console.log(`üìä –î–µ–π—Å—Ç–≤–∏–π: ${gamificationData.actions}`);
      console.log(`üéÅ –ë–æ–Ω—É—Å–æ–≤: ${gamificationData.bonuses}`);
      
      if (gamificationData.bonuses > 0) {
        console.log('üéâ –ë–æ–Ω—É—Å—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!');
      }
      
      return { success: true, duration, data: gamificationData };
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${duration}ms`);
      const errorData = await gamificationResponse.json();
      console.log(`üìù –û—à–∏–±–∫–∞: ${errorData.error}`);
      return { success: false, duration, error: errorData.error };
    }
    
  } catch (error) {
    const endTime = Date.now();
    const duration = endTime - startTime;
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${duration}ms - ${error.message}`);
    return { success: false, duration, error: error.message };
  }
}

async function testGamificationSpeed() {
  console.log('\nüöÄ –¢–ï–°–¢ –°–ö–û–†–û–°–¢–ò –ì–ï–ô–ú–ò–§–ò–ö–ê–¶–ò–ò');
  console.log('===============================\n');
  
  const results = [];
  
  for (let i = 0; i < 3; i++) {
    console.log(`üìù –¢–µ—Å—Ç ${i + 1}:`);
    const result = await testGamification();
    results.push(result);
    
    if (i < 2) {
      await new Promise(resolve => setTimeout(resolve, 2000)); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 2 —Å–µ–∫—É–Ω–¥
    }
  }
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ì–ï–ô–ú–ò–§–ò–ö–ê–¶–ò–ò:');
  console.log('=============================');
  
  const successfulTests = results.filter(r => r && r.success);
  const failedTests = results.filter(r => r && !r.success);
  
  if (successfulTests.length > 0) {
    const avgDuration = successfulTests.reduce((sum, r) => sum + r.duration, 0) / successfulTests.length;
    const avgXP = successfulTests.reduce((sum, r) => sum + r.data.totalXP, 0) / successfulTests.length;
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successfulTests.length}`);
    console.log(`‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgDuration.toFixed(0)}ms`);
    console.log(`üéØ –°—Ä–µ–¥–Ω–∏–π XP: ${avgXP.toFixed(0)}`);
    
    if (avgDuration < 1000) {
      console.log('üéØ –û–¢–õ–ò–ß–ù–û! –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ');
    } else if (avgDuration < 2000) {
      console.log('üëç –•–û–†–û–®–û! –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
    } else {
      console.log('‚ö†Ô∏è  –ú–ï–î–õ–ï–ù–ù–û! –ù—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è');
    }
  }
  
  if (failedTests.length > 0) {
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${failedTests.length}`);
  }
  
  console.log('\nüéÆ –ì–ï–ô–ú–ò–§–ò–ö–ê–¶–ò–Ø –†–ê–ë–û–¢–ê–ï–¢!');
  console.log('- XP –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∑–∞ –≤—Ö–æ–¥');
  console.log('- –ë–æ–Ω—É—Å—ã –∑–∞ —Ä–∞–Ω–Ω–∏–π –≤—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥–Ω—ã–µ');
  console.log('- Streak –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è');
}

testGamificationSpeed().catch(console.error); 